<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>Utopian Concept LLC</title>
 <link href="http://utopianconcept.com/atom.xml" rel="self" type="application/atom+xml" />
 <link href="http://utopianconcept.com/" />
 <updated>2013-12-12T10:26:37-05:00</updated>
 <id>http://utopianconcept.com</id>
 <author>
   <name>Ray Clanan</name>
   <email>rclanan@utopianconcept.com</email>
 </author>
 
 <entry>
   <id>http://utopianconcept.com//posts/client-site-launch-infinity-hair-solutions</id>
   <link type="text/html" rel="alternate" href="http://utopianconcept.com/posts/client-site-launch-infinity-hair-solutions"/>
   <title>Client site launch: Infinity Hair Solutions</title>
   <published>2013-11-27T00:00:00-05:00</published>
   <updated>2013-11-27T00:00:00-05:00</updated>
   <summary type="html">&lt;p&gt;After I setup my site and started blogging I landed a few client projects. The first of which went live today. It is a customized theme developed in &lt;a href=&quot;http://www.prestashop.com/&quot; title=&quot;PrestaShop&quot;&gt;PrestaShop&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Front page&lt;/h2&gt;

&lt;p&gt;&lt;img class=&quot;client-image&quot; src=&quot;http://cdn.utopianconcept.com/clients/ihs/front_page.png&quot; alt=&quot;Infinity Hair Solutions - Front Page&quot;&gt;&lt;/p&gt;

&lt;p&gt;Before the initial launch I setup a custom landing page for newletter signups and announcing the coming of the new site. Below is what the landing page looked like.&lt;/p&gt;

&lt;h2&gt;Landing page&lt;/h2&gt;

&lt;p&gt;&lt;img class=&quot;client-image&quot; src=&quot;http://cdn.utopianconcept.com/clients/ihs/landing_page.png&quot; alt=&quot;Infinity Hair Solutions - Landing Page&quot;&gt;&lt;/p&gt;

&lt;p&gt;If you are interested in getting your own site up and running feel free to &lt;a href=&quot;http://utopianconcept.com/contact/&quot; title=&quot;Contact Me&quot;&gt;contact me&lt;/a&gt;. I am avliable for hire on a &lt;a href=&quot;http://utopianconcept.com/freelance/&quot; title=&quot;Freelancing Information&quot;&gt;freelancing&lt;/a&gt; basis. In the meantime feel free to browse the new site over at &lt;a href=&quot;http://www.infinityhairsolutions.com&quot; title=&quot;Infinity Hair Solutions&quot; target=&quot;_blank&quot;&gt;&lt;a href=&quot;http://www.infinityhairsolutions.com&quot;&gt;www.infinityhairsolutions.com&lt;/a&gt;&lt;/a&gt;.&lt;/p&gt;
</summary>
   <content type="html">&lt;p&gt;After I setup my site and started blogging I landed a few client projects. The first of which went live today. It is a customized theme developed in &lt;a href=&quot;http://www.prestashop.com/&quot; title=&quot;PrestaShop&quot;&gt;PrestaShop&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Front page&lt;/h2&gt;

&lt;p&gt;&lt;img class=&quot;client-image&quot; src=&quot;http://cdn.utopianconcept.com/clients/ihs/front_page.png&quot; alt=&quot;Infinity Hair Solutions - Front Page&quot;&gt;&lt;/p&gt;

&lt;p&gt;Before the initial launch I setup a custom landing page for newletter signups and announcing the coming of the new site. Below is what the landing page looked like.&lt;/p&gt;

&lt;h2&gt;Landing page&lt;/h2&gt;

&lt;p&gt;&lt;img class=&quot;client-image&quot; src=&quot;http://cdn.utopianconcept.com/clients/ihs/landing_page.png&quot; alt=&quot;Infinity Hair Solutions - Landing Page&quot;&gt;&lt;/p&gt;

&lt;p&gt;If you are interested in getting your own site up and running feel free to &lt;a href=&quot;http://utopianconcept.com/contact/&quot; title=&quot;Contact Me&quot;&gt;contact me&lt;/a&gt;. I am avliable for hire on a &lt;a href=&quot;http://utopianconcept.com/freelance/&quot; title=&quot;Freelancing Information&quot;&gt;freelancing&lt;/a&gt; basis. In the meantime feel free to browse the new site over at &lt;a href=&quot;http://www.infinityhairsolutions.com&quot; title=&quot;Infinity Hair Solutions&quot; target=&quot;_blank&quot;&gt;&lt;a href=&quot;http://www.infinityhairsolutions.com&quot;&gt;www.infinityhairsolutions.com&lt;/a&gt;&lt;/a&gt;.&lt;/p&gt;
</content>
   <author>
     <name>Ray Clanan</name>
     <uri>http://utopianconcept.com</uri>
   </author>
   <content type="html"><![CDATA[
<p>&lt;p&gt;After I setup my site and started blogging I landed a few client projects. The first of which went live today. It is a customized theme developed in &lt;a href=&ldquo;<a href="http://www.prestashop.com/">http://www.prestashop.com/</a>&rdquo; title=&ldquo;PrestaShop&rdquo;&gt;PrestaShop&lt;/a&gt;.&lt;/p&gt;</p>

<p>&lt;h2&gt;Front page&lt;/h2&gt;</p>

<p>&lt;p&gt;&lt;img class=&ldquo;client-image&rdquo; src=&ldquo;<a href="http://cdn.utopianconcept.com/clients/ihs/front_page.png">http://cdn.utopianconcept.com/clients/ihs/front_page.png</a>&rdquo; alt=&ldquo;Infinity Hair Solutions - Front Page&rdquo;&gt;&lt;/p&gt;</p>

<p>&lt;p&gt;Before the initial launch I setup a custom landing page for newletter signups and announcing the coming of the new site. Below is what the landing page looked like.&lt;/p&gt;</p>

<p>&lt;h2&gt;Landing page&lt;/h2&gt;</p>

<p>&lt;p&gt;&lt;img class=&ldquo;client-image&rdquo; src=&ldquo;<a href="http://cdn.utopianconcept.com/clients/ihs/landing_page.png">http://cdn.utopianconcept.com/clients/ihs/landing_page.png</a>&rdquo; alt=&ldquo;Infinity Hair Solutions - Landing Page&rdquo;&gt;&lt;/p&gt;</p>

<p>&lt;p&gt;If you are interested in getting your own site up and running feel free to &lt;a href=&ldquo;<a href="http://utopianconcept.com/contact/">http://utopianconcept.com/contact/</a>&rdquo; title=&ldquo;Contact Me&rdquo;&gt;contact me&lt;/a&gt;. I am avliable for hire on a &lt;a href=&ldquo;<a href="http://utopianconcept.com/freelance/">http://utopianconcept.com/freelance/</a>&rdquo; title=&ldquo;Freelancing Information&rdquo;&gt;freelancing&lt;/a&gt; basis. In the meantime feel free to browse the new site over at &lt;a href=&ldquo;<a href="http://www.infinityhairsolutions.com">http://www.infinityhairsolutions.com</a>&rdquo; title=&ldquo;Infinity Hair Solutions&rdquo; target=&ldquo;_blank&rdquo;&gt;&lt;a href=&ldquo;<a href="http://www.infinityhairsolutions.com&amp;quot;&amp;gt;www.infinityhairsolutions.com&amp;lt;/a&amp;gt;&amp;lt;/a&amp;gt;.&amp;lt;/p">http://www.infinityhairsolutions.com&amp;quot;&amp;gt;www.infinityhairsolutions.com&amp;lt;/a&amp;gt;&amp;lt;/a&amp;gt;.&amp;lt;/p</a>&gt;</p>

]]></content>
 </entry>
 
 <entry>
   <id>http://utopianconcept.com//posts/a-gudie-to-creating-a-basic-rest-api-series-introduction</id>
   <link type="text/html" rel="alternate" href="http://utopianconcept.com/posts/a-gudie-to-creating-a-basic-rest-api-series-introduction"/>
   <title>A guide to creating a basic REST API - Series Introduction</title>
   <published>2013-08-20T00:00:00-04:00</published>
   <updated>2013-08-20T00:00:00-04:00</updated>
   <summary type="html">&lt;p&gt;In this new series, I plan on creating a collection of guides that will demonstrate how to create the same basic REST API in different programming languages.&lt;/p&gt;

&lt;p&gt;As some of you who know me may know, I am very passionate about programming. I love learning a new language and comparing it to languages that I have already picked up. I am not entirely sure why I like so many different languages and I cannot, in all seriousness, answer which is my favorite language suffices to say I am enamored with all aspects of programming in general.&lt;/p&gt;

&lt;p&gt;Now with that being said, one of the best ways that I learn to pick up a new language, is to dive in and create something that I created before in a different language, sort of like the premise of creating the hello world application that most books start with, however I feel that approach is too simplistic of an example so I decided to create this series on creating a basic REST API. This will be more so for my own personal reference as are all the blog post that I write but maybe this can also become somewhat of a &lt;a href=&quot;http://en.wikipedia.org/wiki/Rosetta_Stone&quot;&gt;Rosetta Stone&lt;/a&gt; for someone else trying to pick up a new language as well.&lt;/p&gt;

&lt;p&gt;The first guide that I will create will deal with languages that I already have experience with just to get me into the flow of creating the guides. The follow-up guides will be for languages that are new to me. If there are any requests for a particular guide then I will be happy to do those as well. Also, I welcome any comments in which the guides can be improved.&lt;/p&gt;

&lt;hr&gt;

&lt;h4&gt;**Disclaimer: ** &lt;em&gt;I do not claim to be an expert on REST, APIs, or for that matter in all the languages that I am going to try and cover. As such, please do not regard these as best practices but rather a stepping stone on yours (and mine) path of learning.&lt;/em&gt;&lt;/h4&gt;

&lt;hr&gt;

&lt;p&gt;With all of that out of the way, let&amp;rsquo;s say we get on with the guide. In this introduction, I am just going to cover the basics questions.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;What is an API?&lt;/li&gt;
&lt;li&gt;Examples of a Web API&lt;/li&gt;
&lt;li&gt;HTTP Methods and HTTP Status Codes&lt;/li&gt;
&lt;li&gt;What is REST?&lt;/li&gt;
&lt;li&gt;Examples of REST&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;What is an API?&lt;/h3&gt;

&lt;p&gt;An API or &lt;strong&gt;A&lt;/strong&gt;pplication &lt;strong&gt;P&lt;/strong&gt;rogramming &lt;strong&gt;I&lt;/strong&gt;nterface can be defined as a contract (or &lt;a href=&quot;http://www.merriam-webster.com/dictionary/interface&quot;&gt;interface&lt;/a&gt;) in which other applications utilize to interact with your system. In doing so this provides externally exposed features into your rather closed environment.&lt;/p&gt;

&lt;p&gt;For this simplistic categorization of APIs, we can think of them coming in two flavors, one being software APIs and the other being web APIs. The focus of this series will be REST APIs which is a type of Web APIs.&lt;/p&gt;

&lt;p&gt;Software APIs typically are related to software libraries or frameworks and are generally geared more towards desktop or client/server type applications.&lt;/p&gt;

&lt;p&gt;Web APIs on the other hand deal with HTTP (**H**yper**t**ext &lt;strong&gt;T&lt;/strong&gt;ransfer &lt;strong&gt;P&lt;/strong&gt;rotocol) methods and HTTP Status Codes. More on those later, but the methods are the actions which typically control the API and the status codes along with a  response message is the result of what the API passes back.&lt;/p&gt;

&lt;h3&gt;Examples of a Web API&lt;/h3&gt;

&lt;p&gt;Many of the most popular websites have published public APIs these days. Not all of these examples are of REST APIs as well as the ones that do include REST API they also include other types of APIs like SOAP. Some examples of these popular APIs are:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://code.google.com/&quot;&gt;Google API&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;Allows you to integration with maps&amp;#44; email&amp;#44; Google+&amp;#44; and more.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developers.facebook.com/docs/reference/apis/&quot;&gt;Facebook API&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;Provides integrations like the ability to &amp;lsquo;Like&amp;rsquo; and share pages from your website.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://dev.twitter.com/&quot;&gt;Twitter API&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;With this integration you can automate sending tweets when different events occur as well as read tweets via the API&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.salesforce.com/us/developer/docs/api/index.htm&quot;&gt;Salesforce.com&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;Allows you to access information about your contacts&amp;#44; send messages&amp;#44; among other things&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.linkedin.com/apis&quot;&gt;LinkedIn API&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;Allows you to perform searches&amp;#44; share content&amp;#44; etc.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://developer.github.com/v3/&quot;&gt;Github API&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;Provides the ability to create and search among Issues&amp;#44; Gists&amp;#44; Git Data&amp;#44; People&amp;#44; as well as a host of other features&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;HTTP Methods and HTTP Status Codes&lt;/h3&gt;

&lt;h5&gt;HTTP Methods&lt;/h5&gt;

&lt;p&gt;HTTP methods are defined in the &lt;a href=&quot;http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html&quot;&gt;RFC 2616&lt;/a&gt; put out by the &lt;a href=&quot;http://www.w3.org/&quot;&gt;World Wide Web Consortium (W3C)&lt;/a&gt;. These HTTP methods are commonly referred to as &lt;em&gt;&amp;ldquo;verbs&amp;rdquo;&lt;/em&gt;. Currently there are a total of eight different verbs that are defined by the HTTP/1.1 protocol. Below these verbs are defined as well as their typical usage.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;OPTIONS

&lt;ul&gt;
&lt;li&gt;Used to request what options are available for the request/response&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;GET

&lt;ul&gt;
&lt;li&gt;Used to retrieve information about a resource&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;HEAD

&lt;ul&gt;
&lt;li&gt;Same as GET except only returns the header information&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;POST

&lt;ul&gt;
&lt;li&gt;Used for creating a new resource&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;PUT

&lt;ul&gt;
&lt;li&gt;Used for updating a resource&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;DELETE

&lt;ul&gt;
&lt;li&gt;Used for deleting a resource&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;TRACE

&lt;ul&gt;
&lt;li&gt;Used for tracing the request message&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;CONNECT

&lt;ul&gt;
&lt;li&gt;Used for proxies&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In a typical REST API we usually only concern ourselves with GET, POST, PUT, DELETE, which form the basis of &lt;a href=&quot;http://en.wikipedia.org/wiki/Create,_read,_update_and_delete&quot;&gt;CRUD&lt;/a&gt; (Create, Read, Update, and Delete). The most commonly used HTTP method that most people unknowingly utilize is the GET verb. Since GET is used as a way to retrieve information about a resource, which is what is used to load web pages into a browser. Have you ever filled out an online form? Then you have most likely used POST, though there are other options as well. Some browsers do not implement all the HTTP methods nor do they need to.&lt;/p&gt;

&lt;h5&gt;HTTP Status Codes&lt;/h5&gt;

&lt;p&gt;HTTP Status Codes are also defined in the &lt;a href=&quot;http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10&quot;&gt;RFC 2616&lt;/a&gt; put out by the W3C. There are numerous types of status codes so for further information please refer to &lt;a href=&quot;http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10&quot;&gt;section ten of the RFC&lt;/a&gt;. I will name a few that you are most likely to use the most, though they all have recommended use cases that are associated with them.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Successful Codes - 2xx

&lt;ul&gt;
&lt;li&gt;200 - OK

&lt;ul&gt;
&lt;li&gt;Request has succeeded&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;201 - Created

&lt;ul&gt;
&lt;li&gt;New resource has been created&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;204 - No Content

&lt;ul&gt;
&lt;li&gt;Request has been accepted&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Redirect Codes - 3xx

&lt;ul&gt;
&lt;li&gt;304 - Not Modified

&lt;ul&gt;
&lt;li&gt;Indicates resource has not been modified since last requested&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Client Error Codes - 4xx

&lt;ul&gt;
&lt;li&gt;400 - Bad Request

&lt;ul&gt;
&lt;li&gt;Request could not be understood&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;401 - Unauthorized

&lt;ul&gt;
&lt;li&gt;Missing or invalid authentication information&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;403 - Forbidden

&lt;ul&gt;
&lt;li&gt;User is not authorized to perform the operation or resource is unavailable&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;404 - Not Found

&lt;ul&gt;
&lt;li&gt;Requested resource was not found&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;409 - Conflict

&lt;ul&gt;
&lt;li&gt;A resource conflict&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Server Error Codes - 5xx

&lt;ul&gt;
&lt;li&gt;500 - Internal Server Error

&lt;ul&gt;
&lt;li&gt;General catch-all for thrown exceptions&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;503 - Service Unavailable

&lt;ul&gt;
&lt;li&gt;Service cannot be used at the time of the request&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;What is REST?&lt;/h3&gt;

&lt;p&gt;REST stands for &lt;strong&gt;Re&lt;/strong&gt;presentational &lt;strong&gt;S&lt;/strong&gt;tate &lt;strong&gt;T&lt;/strong&gt;ransfer. For the best understanding of the REST architecture, I would refer to man who came up with the idea, &lt;a href=&quot;http://www.ics.uci.edu/%7Efielding/&quot;&gt;Roy Thomas Fielding&lt;/a&gt;. In his &lt;a href=&quot;http://www.ics.uci.edu/%7Efielding/pubs/dissertation/top.htm&quot;&gt;dissertation&lt;/a&gt;[&lt;sup&gt;1],_Architectural&lt;/sup&gt; Styles and the Design of Network-based Software Architectures_, details on REST can be found in &lt;a href=&quot;http://www.ics.uci.edu/%7Efielding/pubs/dissertation/rest_arch_style.htm&quot;&gt;chapter 5&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;REST works on the basic principle of resources. A resource can be anything from a person, to a task, to a blog post. While, REST does not have an official standard that must be followed there are best practices and recommendations put forth in the dissertations and the RFC, amongst other places on the internet. I will not attempt to set for any of those in these guides as I am just trying to show the basic functionality of REST APIs in implemented in different languages. Even though there isn&amp;rsquo;t a set standard there are six defined constraints that attempt to define what exactly makes a RESTful API.&lt;/p&gt;

&lt;p&gt;The six constraints are:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Client-Server

&lt;ul&gt;
&lt;li&gt;This one deals with the separation of concern between the client and server. If the interface between the two remains unchanged then the client and/or server can be replaced and developed independently of each other.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Stateless

&lt;ul&gt;
&lt;li&gt;By definition, REST means statelessness; therefore the state is handle the request is embedded in the request itself.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Cache

&lt;ul&gt;
&lt;li&gt;This one basically states that a resource must be cacheable and define themselves as such to the client.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Uniform Interface

&lt;ul&gt;
&lt;li&gt;This one defines the interface between the client and server that allows the two to be decoupled from each other. Uniform Interface can be further described by four interface constraints:

&lt;ol&gt;
&lt;li&gt;Identification of Resources

&lt;ul&gt;
&lt;li&gt;Resources are identified in requests using URIs&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Manipulation of Resources through Representations

&lt;ul&gt;
&lt;li&gt;Providing you have permission to, you should have enough information to modify or delete a resource once given the representation of the resource&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Self-descriptive messages

&lt;ul&gt;
&lt;li&gt;States that each request/response describes how to process each message&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Hypermedia as the engine of application state (HATEOAS)

&lt;ul&gt;
&lt;li&gt;HATEOAS states that the client should be able to interact with the service entirely through hypermedia.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Layered System

&lt;ul&gt;
&lt;li&gt;The system should be composed of hierarchical layers by constraining component behavior such that each component cannot interact with any layer beyond the immediate layer in which they are interacting with. So, the client would not be able to interact directly with the end server if there is a cache server in between them. The client would interact with the cache server which would in turn interact with the server.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Code-On-Demand (Optional)

&lt;ul&gt;
&lt;li&gt;Basically, this states that additional functionality can be distributed in the form of scripts through the API.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;Examples of REST&lt;/h3&gt;

&lt;p&gt;The remaining gudies will cover the creatation of a task list REST web service. Here we will look at a few examples that will utilize the task list example.&lt;/p&gt;

&lt;p&gt;If we wanted to get a list of all task, we would utilize the GET HTTP method:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;GET http://example.com/tasks HTTP/1.1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Say we wanted to create a new task, for that we would utilize the POST HTTP method:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;xml language-xml&quot; data-lang=&quot;xml&quot;&gt;POST http://example.com/tasks HTTP/1.1

&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;task&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;name&amp;gt;&lt;/span&gt;Some Name Here&lt;span class=&quot;nt&quot;&gt;&amp;lt;/name&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/task&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If there is a specific task that you would like to see, we would use GET like above and provide it with the task_number:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;xml language-xml&quot; data-lang=&quot;xml&quot;&gt;GET http://example.com/tasks/12345 HTTP/1.1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To update the name of the task that we just retrieve we would use the PUT verb and could do something like:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;xml language-xml&quot; data-lang=&quot;xml&quot;&gt;PUT http://example.com/tasks/12345 HTTP/1.1

&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;task&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;name&amp;gt;&lt;/span&gt;New Name Here&lt;span class=&quot;nt&quot;&gt;&amp;lt;/name&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/task&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And assuming we had permission to do so, we can delete it by, you guessed it, the DELETE method:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;xml language-xml&quot; data-lang=&quot;xml&quot;&gt;DELETE http://example.com/tasks/12345 HTTP/1.1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For further examples, follow along with the rest of the series and see how we go about implementing a basic REST API for tasks, and then take it a step further and see how do implement the same API across different languages.&lt;/p&gt;

&lt;h3&gt;References:&lt;/h3&gt;

&lt;p&gt;[&lt;sup&gt;1]:&lt;/sup&gt; Fielding, Roy Thomas. &lt;em&gt;Architectural Styles and the Design of Network-based Software Architectures&lt;/em&gt;. Doctoral dissertation, University of California, Irvine, 2000.&lt;/p&gt;
</summary>
   <content type="html">&lt;p&gt;In this new series, I plan on creating a collection of guides that will demonstrate how to create the same basic REST API in different programming languages.&lt;/p&gt;

&lt;p&gt;As some of you who know me may know, I am very passionate about programming. I love learning a new language and comparing it to languages that I have already picked up. I am not entirely sure why I like so many different languages and I cannot, in all seriousness, answer which is my favorite language suffices to say I am enamored with all aspects of programming in general.&lt;/p&gt;

&lt;p&gt;Now with that being said, one of the best ways that I learn to pick up a new language, is to dive in and create something that I created before in a different language, sort of like the premise of creating the hello world application that most books start with, however I feel that approach is too simplistic of an example so I decided to create this series on creating a basic REST API. This will be more so for my own personal reference as are all the blog post that I write but maybe this can also become somewhat of a &lt;a href=&quot;http://en.wikipedia.org/wiki/Rosetta_Stone&quot;&gt;Rosetta Stone&lt;/a&gt; for someone else trying to pick up a new language as well.&lt;/p&gt;

&lt;p&gt;The first guide that I will create will deal with languages that I already have experience with just to get me into the flow of creating the guides. The follow-up guides will be for languages that are new to me. If there are any requests for a particular guide then I will be happy to do those as well. Also, I welcome any comments in which the guides can be improved.&lt;/p&gt;

&lt;hr&gt;

&lt;h4&gt;**Disclaimer: ** &lt;em&gt;I do not claim to be an expert on REST, APIs, or for that matter in all the languages that I am going to try and cover. As such, please do not regard these as best practices but rather a stepping stone on yours (and mine) path of learning.&lt;/em&gt;&lt;/h4&gt;

&lt;hr&gt;

&lt;p&gt;With all of that out of the way, let&amp;rsquo;s say we get on with the guide. In this introduction, I am just going to cover the basics questions.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;What is an API?&lt;/li&gt;
&lt;li&gt;Examples of a Web API&lt;/li&gt;
&lt;li&gt;HTTP Methods and HTTP Status Codes&lt;/li&gt;
&lt;li&gt;What is REST?&lt;/li&gt;
&lt;li&gt;Examples of REST&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;What is an API?&lt;/h3&gt;

&lt;p&gt;An API or &lt;strong&gt;A&lt;/strong&gt;pplication &lt;strong&gt;P&lt;/strong&gt;rogramming &lt;strong&gt;I&lt;/strong&gt;nterface can be defined as a contract (or &lt;a href=&quot;http://www.merriam-webster.com/dictionary/interface&quot;&gt;interface&lt;/a&gt;) in which other applications utilize to interact with your system. In doing so this provides externally exposed features into your rather closed environment.&lt;/p&gt;

&lt;p&gt;For this simplistic categorization of APIs, we can think of them coming in two flavors, one being software APIs and the other being web APIs. The focus of this series will be REST APIs which is a type of Web APIs.&lt;/p&gt;

&lt;p&gt;Software APIs typically are related to software libraries or frameworks and are generally geared more towards desktop or client/server type applications.&lt;/p&gt;

&lt;p&gt;Web APIs on the other hand deal with HTTP (**H**yper**t**ext &lt;strong&gt;T&lt;/strong&gt;ransfer &lt;strong&gt;P&lt;/strong&gt;rotocol) methods and HTTP Status Codes. More on those later, but the methods are the actions which typically control the API and the status codes along with a  response message is the result of what the API passes back.&lt;/p&gt;

&lt;h3&gt;Examples of a Web API&lt;/h3&gt;

&lt;p&gt;Many of the most popular websites have published public APIs these days. Not all of these examples are of REST APIs as well as the ones that do include REST API they also include other types of APIs like SOAP. Some examples of these popular APIs are:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://code.google.com/&quot;&gt;Google API&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;Allows you to integration with maps&amp;#44; email&amp;#44; Google+&amp;#44; and more.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developers.facebook.com/docs/reference/apis/&quot;&gt;Facebook API&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;Provides integrations like the ability to &amp;lsquo;Like&amp;rsquo; and share pages from your website.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://dev.twitter.com/&quot;&gt;Twitter API&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;With this integration you can automate sending tweets when different events occur as well as read tweets via the API&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.salesforce.com/us/developer/docs/api/index.htm&quot;&gt;Salesforce.com&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;Allows you to access information about your contacts&amp;#44; send messages&amp;#44; among other things&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.linkedin.com/apis&quot;&gt;LinkedIn API&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;Allows you to perform searches&amp;#44; share content&amp;#44; etc.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://developer.github.com/v3/&quot;&gt;Github API&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;Provides the ability to create and search among Issues&amp;#44; Gists&amp;#44; Git Data&amp;#44; People&amp;#44; as well as a host of other features&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;HTTP Methods and HTTP Status Codes&lt;/h3&gt;

&lt;h5&gt;HTTP Methods&lt;/h5&gt;

&lt;p&gt;HTTP methods are defined in the &lt;a href=&quot;http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html&quot;&gt;RFC 2616&lt;/a&gt; put out by the &lt;a href=&quot;http://www.w3.org/&quot;&gt;World Wide Web Consortium (W3C)&lt;/a&gt;. These HTTP methods are commonly referred to as &lt;em&gt;&amp;ldquo;verbs&amp;rdquo;&lt;/em&gt;. Currently there are a total of eight different verbs that are defined by the HTTP/1.1 protocol. Below these verbs are defined as well as their typical usage.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;OPTIONS

&lt;ul&gt;
&lt;li&gt;Used to request what options are available for the request/response&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;GET

&lt;ul&gt;
&lt;li&gt;Used to retrieve information about a resource&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;HEAD

&lt;ul&gt;
&lt;li&gt;Same as GET except only returns the header information&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;POST

&lt;ul&gt;
&lt;li&gt;Used for creating a new resource&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;PUT

&lt;ul&gt;
&lt;li&gt;Used for updating a resource&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;DELETE

&lt;ul&gt;
&lt;li&gt;Used for deleting a resource&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;TRACE

&lt;ul&gt;
&lt;li&gt;Used for tracing the request message&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;CONNECT

&lt;ul&gt;
&lt;li&gt;Used for proxies&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In a typical REST API we usually only concern ourselves with GET, POST, PUT, DELETE, which form the basis of &lt;a href=&quot;http://en.wikipedia.org/wiki/Create,_read,_update_and_delete&quot;&gt;CRUD&lt;/a&gt; (Create, Read, Update, and Delete). The most commonly used HTTP method that most people unknowingly utilize is the GET verb. Since GET is used as a way to retrieve information about a resource, which is what is used to load web pages into a browser. Have you ever filled out an online form? Then you have most likely used POST, though there are other options as well. Some browsers do not implement all the HTTP methods nor do they need to.&lt;/p&gt;

&lt;h5&gt;HTTP Status Codes&lt;/h5&gt;

&lt;p&gt;HTTP Status Codes are also defined in the &lt;a href=&quot;http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10&quot;&gt;RFC 2616&lt;/a&gt; put out by the W3C. There are numerous types of status codes so for further information please refer to &lt;a href=&quot;http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10&quot;&gt;section ten of the RFC&lt;/a&gt;. I will name a few that you are most likely to use the most, though they all have recommended use cases that are associated with them.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Successful Codes - 2xx

&lt;ul&gt;
&lt;li&gt;200 - OK

&lt;ul&gt;
&lt;li&gt;Request has succeeded&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;201 - Created

&lt;ul&gt;
&lt;li&gt;New resource has been created&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;204 - No Content

&lt;ul&gt;
&lt;li&gt;Request has been accepted&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Redirect Codes - 3xx

&lt;ul&gt;
&lt;li&gt;304 - Not Modified

&lt;ul&gt;
&lt;li&gt;Indicates resource has not been modified since last requested&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Client Error Codes - 4xx

&lt;ul&gt;
&lt;li&gt;400 - Bad Request

&lt;ul&gt;
&lt;li&gt;Request could not be understood&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;401 - Unauthorized

&lt;ul&gt;
&lt;li&gt;Missing or invalid authentication information&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;403 - Forbidden

&lt;ul&gt;
&lt;li&gt;User is not authorized to perform the operation or resource is unavailable&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;404 - Not Found

&lt;ul&gt;
&lt;li&gt;Requested resource was not found&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;409 - Conflict

&lt;ul&gt;
&lt;li&gt;A resource conflict&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Server Error Codes - 5xx

&lt;ul&gt;
&lt;li&gt;500 - Internal Server Error

&lt;ul&gt;
&lt;li&gt;General catch-all for thrown exceptions&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;503 - Service Unavailable

&lt;ul&gt;
&lt;li&gt;Service cannot be used at the time of the request&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;What is REST?&lt;/h3&gt;

&lt;p&gt;REST stands for &lt;strong&gt;Re&lt;/strong&gt;presentational &lt;strong&gt;S&lt;/strong&gt;tate &lt;strong&gt;T&lt;/strong&gt;ransfer. For the best understanding of the REST architecture, I would refer to man who came up with the idea, &lt;a href=&quot;http://www.ics.uci.edu/%7Efielding/&quot;&gt;Roy Thomas Fielding&lt;/a&gt;. In his &lt;a href=&quot;http://www.ics.uci.edu/%7Efielding/pubs/dissertation/top.htm&quot;&gt;dissertation&lt;/a&gt;[&lt;sup&gt;1],_Architectural&lt;/sup&gt; Styles and the Design of Network-based Software Architectures_, details on REST can be found in &lt;a href=&quot;http://www.ics.uci.edu/%7Efielding/pubs/dissertation/rest_arch_style.htm&quot;&gt;chapter 5&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;REST works on the basic principle of resources. A resource can be anything from a person, to a task, to a blog post. While, REST does not have an official standard that must be followed there are best practices and recommendations put forth in the dissertations and the RFC, amongst other places on the internet. I will not attempt to set for any of those in these guides as I am just trying to show the basic functionality of REST APIs in implemented in different languages. Even though there isn&amp;rsquo;t a set standard there are six defined constraints that attempt to define what exactly makes a RESTful API.&lt;/p&gt;

&lt;p&gt;The six constraints are:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Client-Server

&lt;ul&gt;
&lt;li&gt;This one deals with the separation of concern between the client and server. If the interface between the two remains unchanged then the client and/or server can be replaced and developed independently of each other.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Stateless

&lt;ul&gt;
&lt;li&gt;By definition, REST means statelessness; therefore the state is handle the request is embedded in the request itself.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Cache

&lt;ul&gt;
&lt;li&gt;This one basically states that a resource must be cacheable and define themselves as such to the client.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Uniform Interface

&lt;ul&gt;
&lt;li&gt;This one defines the interface between the client and server that allows the two to be decoupled from each other. Uniform Interface can be further described by four interface constraints:

&lt;ol&gt;
&lt;li&gt;Identification of Resources

&lt;ul&gt;
&lt;li&gt;Resources are identified in requests using URIs&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Manipulation of Resources through Representations

&lt;ul&gt;
&lt;li&gt;Providing you have permission to, you should have enough information to modify or delete a resource once given the representation of the resource&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Self-descriptive messages

&lt;ul&gt;
&lt;li&gt;States that each request/response describes how to process each message&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Hypermedia as the engine of application state (HATEOAS)

&lt;ul&gt;
&lt;li&gt;HATEOAS states that the client should be able to interact with the service entirely through hypermedia.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Layered System

&lt;ul&gt;
&lt;li&gt;The system should be composed of hierarchical layers by constraining component behavior such that each component cannot interact with any layer beyond the immediate layer in which they are interacting with. So, the client would not be able to interact directly with the end server if there is a cache server in between them. The client would interact with the cache server which would in turn interact with the server.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Code-On-Demand (Optional)

&lt;ul&gt;
&lt;li&gt;Basically, this states that additional functionality can be distributed in the form of scripts through the API.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;Examples of REST&lt;/h3&gt;

&lt;p&gt;The remaining gudies will cover the creatation of a task list REST web service. Here we will look at a few examples that will utilize the task list example.&lt;/p&gt;

&lt;p&gt;If we wanted to get a list of all task, we would utilize the GET HTTP method:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;GET http://example.com/tasks HTTP/1.1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Say we wanted to create a new task, for that we would utilize the POST HTTP method:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;xml language-xml&quot; data-lang=&quot;xml&quot;&gt;POST http://example.com/tasks HTTP/1.1

&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;task&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;name&amp;gt;&lt;/span&gt;Some Name Here&lt;span class=&quot;nt&quot;&gt;&amp;lt;/name&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/task&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If there is a specific task that you would like to see, we would use GET like above and provide it with the task_number:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;xml language-xml&quot; data-lang=&quot;xml&quot;&gt;GET http://example.com/tasks/12345 HTTP/1.1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To update the name of the task that we just retrieve we would use the PUT verb and could do something like:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;xml language-xml&quot; data-lang=&quot;xml&quot;&gt;PUT http://example.com/tasks/12345 HTTP/1.1

&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;task&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;name&amp;gt;&lt;/span&gt;New Name Here&lt;span class=&quot;nt&quot;&gt;&amp;lt;/name&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/task&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And assuming we had permission to do so, we can delete it by, you guessed it, the DELETE method:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;xml language-xml&quot; data-lang=&quot;xml&quot;&gt;DELETE http://example.com/tasks/12345 HTTP/1.1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For further examples, follow along with the rest of the series and see how we go about implementing a basic REST API for tasks, and then take it a step further and see how do implement the same API across different languages.&lt;/p&gt;

&lt;h3&gt;References:&lt;/h3&gt;

&lt;p&gt;[&lt;sup&gt;1]:&lt;/sup&gt; Fielding, Roy Thomas. &lt;em&gt;Architectural Styles and the Design of Network-based Software Architectures&lt;/em&gt;. Doctoral dissertation, University of California, Irvine, 2000.&lt;/p&gt;
</content>
   <author>
     <name>Ray Clanan</name>
     <uri>http://utopianconcept.com</uri>
   </author>
   <content type="html"><![CDATA[
<p>&lt;p&gt;In this new series, I plan on creating a collection of guides that will demonstrate how to create the same basic REST API in different programming languages.&lt;/p&gt;</p>

<p>&lt;p&gt;As some of you who know me may know, I am very passionate about programming. I love learning a new language and comparing it to languages that I have already picked up. I am not entirely sure why I like so many different languages and I cannot, in all seriousness, answer which is my favorite language suffices to say I am enamored with all aspects of programming in general.&lt;/p&gt;</p>

<p>&lt;p&gt;Now with that being said, one of the best ways that I learn to pick up a new language, is to dive in and create something that I created before in a different language, sort of like the premise of creating the hello world application that most books start with, however I feel that approach is too simplistic of an example so I decided to create this series on creating a basic REST API. This will be more so for my own personal reference as are all the blog post that I write but maybe this can also become somewhat of a &lt;a href=&ldquo;<a href="http://en.wikipedia.org/wiki/Rosetta_Stone&amp;quot;&amp;gt;Rosetta">http://en.wikipedia.org/wiki/Rosetta_Stone&amp;quot;&amp;gt;Rosetta</a> Stone&lt;/a&gt; for someone else trying to pick up a new language as well.&lt;/p&gt;</p>

<p>&lt;p&gt;The first guide that I will create will deal with languages that I already have experience with just to get me into the flow of creating the guides. The follow-up guides will be for languages that are new to me. If there are any requests for a particular guide then I will be happy to do those as well. Also, I welcome any comments in which the guides can be improved.&lt;/p&gt;</p>

<p>&lt;hr&gt;</p>

<p>&lt;h4&gt;**Disclaimer: ** &lt;em&gt;I do not claim to be an expert on REST, APIs, or for that matter in all the languages that I am going to try and cover. As such, please do not regard these as best practices but rather a stepping stone on yours (and mine) path of learning.&lt;/em&gt;&lt;/h4&gt;</p>

<p>&lt;hr&gt;</p>

<p>&lt;p&gt;With all of that out of the way, let&amp;rsquo;s say we get on with the guide. In this introduction, I am just going to cover the basics questions.&lt;/p&gt;</p>

<p>&lt;ol&gt;
&lt;li&gt;What is an API?&lt;/li&gt;
&lt;li&gt;Examples of a Web API&lt;/li&gt;
&lt;li&gt;HTTP Methods and HTTP Status Codes&lt;/li&gt;
&lt;li&gt;What is REST?&lt;/li&gt;
&lt;li&gt;Examples of REST&lt;/li&gt;
&lt;/ol&gt;</p>

<p>&lt;h3&gt;What is an API?&lt;/h3&gt;</p>

<p>&lt;p&gt;An API or &lt;strong&gt;A&lt;/strong&gt;pplication &lt;strong&gt;P&lt;/strong&gt;rogramming &lt;strong&gt;I&lt;/strong&gt;nterface can be defined as a contract (or &lt;a href=&rdquo;<a href="http://www.merriam-webster.com/dictionary/interface&amp;quot;&amp;gt;interface&amp;lt;/a&amp;gt;">http://www.merriam-webster.com/dictionary/interface&amp;quot;&amp;gt;interface&amp;lt;/a&amp;gt;</a>) in which other applications utilize to interact with your system. In doing so this provides externally exposed features into your rather closed environment.&lt;/p&gt;</p>

<p>&lt;p&gt;For this simplistic categorization of APIs, we can think of them coming in two flavors, one being software APIs and the other being web APIs. The focus of this series will be REST APIs which is a type of Web APIs.&lt;/p&gt;</p>

<p>&lt;p&gt;Software APIs typically are related to software libraries or frameworks and are generally geared more towards desktop or client/server type applications.&lt;/p&gt;</p>

<p>&lt;p&gt;Web APIs on the other hand deal with HTTP (**H**yper**t**ext &lt;strong&gt;T&lt;/strong&gt;ransfer &lt;strong&gt;P&lt;/strong&gt;rotocol) methods and HTTP Status Codes. More on those later, but the methods are the actions which typically control the API and the status codes along with a  response message is the result of what the API passes back.&lt;/p&gt;</p>

<p>&lt;h3&gt;Examples of a Web API&lt;/h3&gt;</p>

<p>&lt;p&gt;Many of the most popular websites have published public APIs these days. Not all of these examples are of REST APIs as well as the ones that do include REST API they also include other types of APIs like SOAP. Some examples of these popular APIs are:&lt;/p&gt;</p>

<p>&lt;ol&gt;
&lt;li&gt;&lt;a href=&ldquo;<a href="https://code.google.com/&amp;quot;&amp;gt;Google">https://code.google.com/&amp;quot;&amp;gt;Google</a> API&lt;/a&gt;</p>

<p>&lt;ul&gt;
&lt;li&gt;Allows you to integration with maps&amp;#44; email&amp;#44; Google+&amp;#44; and more.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&rdquo;<a href="https://developers.facebook.com/docs/reference/apis/&amp;quot;&amp;gt;Facebook">https://developers.facebook.com/docs/reference/apis/&amp;quot;&amp;gt;Facebook</a> API&lt;/a&gt;</p>

<p>&lt;ul&gt;
&lt;li&gt;Provides integrations like the ability to &amp;lsquo;Like&amp;rsquo; and share pages from your website.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&ldquo;<a href="https://dev.twitter.com/&amp;quot;&amp;gt;Twitter">https://dev.twitter.com/&amp;quot;&amp;gt;Twitter</a> API&lt;/a&gt;</p>

<p>&lt;ul&gt;
&lt;li&gt;With this integration you can automate sending tweets when different events occur as well as read tweets via the API&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&rdquo;<a href="http://www.salesforce.com/us/developer/docs/api/index.htm&amp;quot;&amp;gt;Salesforce.com&amp;lt;/a">http://www.salesforce.com/us/developer/docs/api/index.htm&amp;quot;&amp;gt;Salesforce.com&amp;lt;/a</a>&gt;</p>

<p>&lt;ul&gt;
&lt;li&gt;Allows you to access information about your contacts&amp;#44; send messages&amp;#44; among other things&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&ldquo;<a href="https://developer.linkedin.com/apis&amp;quot;&amp;gt;LinkedIn">https://developer.linkedin.com/apis&amp;quot;&amp;gt;LinkedIn</a> API&lt;/a&gt;</p>

<p>&lt;ul&gt;
&lt;li&gt;Allows you to perform searches&amp;#44; share content&amp;#44; etc.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&rdquo;<a href="http://developer.github.com/v3/&amp;quot;&amp;gt;Github">http://developer.github.com/v3/&amp;quot;&amp;gt;Github</a> API&lt;/a&gt;</p>

<p>&lt;ul&gt;
&lt;li&gt;Provides the ability to create and search among Issues&amp;#44; Gists&amp;#44; Git Data&amp;#44; People&amp;#44; as well as a host of other features&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;</p>

<p>&lt;h3&gt;HTTP Methods and HTTP Status Codes&lt;/h3&gt;</p>

<p>&lt;h5&gt;HTTP Methods&lt;/h5&gt;</p>

<p>&lt;p&gt;HTTP methods are defined in the &lt;a href=&ldquo;<a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html&amp;quot;&amp;gt;RFC">http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html&amp;quot;&amp;gt;RFC</a> 2616&lt;/a&gt; put out by the &lt;a href=&rdquo;<a href="http://www.w3.org/&amp;quot;&amp;gt;World">http://www.w3.org/&amp;quot;&amp;gt;World</a> Wide Web Consortium (W3C)&lt;/a&gt;. These HTTP methods are commonly referred to as &lt;em&gt;&amp;ldquo;verbs&amp;rdquo;&lt;/em&gt;. Currently there are a total of eight different verbs that are defined by the HTTP/1.1 protocol. Below these verbs are defined as well as their typical usage.&lt;/p&gt;</p>

<p>&lt;ol&gt;
&lt;li&gt;OPTIONS</p>

<p>&lt;ul&gt;
&lt;li&gt;Used to request what options are available for the request/response&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;GET</p>

<p>&lt;ul&gt;
&lt;li&gt;Used to retrieve information about a resource&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;HEAD</p>

<p>&lt;ul&gt;
&lt;li&gt;Same as GET except only returns the header information&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;POST</p>

<p>&lt;ul&gt;
&lt;li&gt;Used for creating a new resource&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;PUT</p>

<p>&lt;ul&gt;
&lt;li&gt;Used for updating a resource&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;DELETE</p>

<p>&lt;ul&gt;
&lt;li&gt;Used for deleting a resource&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;TRACE</p>

<p>&lt;ul&gt;
&lt;li&gt;Used for tracing the request message&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;CONNECT</p>

<p>&lt;ul&gt;
&lt;li&gt;Used for proxies&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;</p>

<p>&lt;p&gt;In a typical REST API we usually only concern ourselves with GET, POST, PUT, DELETE, which form the basis of &lt;a href=&ldquo;<a href="http://en.wikipedia.org/wiki/Create,_read,_update_and_delete&amp;quot;&amp;gt;CRUD&amp;lt;/a">http://en.wikipedia.org/wiki/Create,_read,_update_and_delete&amp;quot;&amp;gt;CRUD&amp;lt;/a</a>&gt; (Create, Read, Update, and Delete). The most commonly used HTTP method that most people unknowingly utilize is the GET verb. Since GET is used as a way to retrieve information about a resource, which is what is used to load web pages into a browser. Have you ever filled out an online form? Then you have most likely used POST, though there are other options as well. Some browsers do not implement all the HTTP methods nor do they need to.&lt;/p&gt;</p>

<p>&lt;h5&gt;HTTP Status Codes&lt;/h5&gt;</p>

<p>&lt;p&gt;HTTP Status Codes are also defined in the &lt;a href=&rdquo;<a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10&amp;quot;&amp;gt;RFC">http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10&amp;quot;&amp;gt;RFC</a> 2616&lt;/a&gt; put out by the W3C. There are numerous types of status codes so for further information please refer to &lt;a href=&ldquo;<a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10&amp;quot;&amp;gt;section">http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10&amp;quot;&amp;gt;section</a> ten of the RFC&lt;/a&gt;. I will name a few that you are most likely to use the most, though they all have recommended use cases that are associated with them.&lt;/p&gt;</p>

<p>&lt;ol&gt;
&lt;li&gt;Successful Codes - 2xx</p>

<p>&lt;ul&gt;
&lt;li&gt;200 - OK</p>

<p>&lt;ul&gt;
&lt;li&gt;Request has succeeded&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;201 - Created</p>

<p>&lt;ul&gt;
&lt;li&gt;New resource has been created&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;204 - No Content</p>

<p>&lt;ul&gt;
&lt;li&gt;Request has been accepted&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Redirect Codes - 3xx</p>

<p>&lt;ul&gt;
&lt;li&gt;304 - Not Modified</p>

<p>&lt;ul&gt;
&lt;li&gt;Indicates resource has not been modified since last requested&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Client Error Codes - 4xx</p>

<p>&lt;ul&gt;
&lt;li&gt;400 - Bad Request</p>

<p>&lt;ul&gt;
&lt;li&gt;Request could not be understood&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;401 - Unauthorized</p>

<p>&lt;ul&gt;
&lt;li&gt;Missing or invalid authentication information&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;403 - Forbidden</p>

<p>&lt;ul&gt;
&lt;li&gt;User is not authorized to perform the operation or resource is unavailable&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;404 - Not Found</p>

<p>&lt;ul&gt;
&lt;li&gt;Requested resource was not found&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;409 - Conflict</p>

<p>&lt;ul&gt;
&lt;li&gt;A resource conflict&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Server Error Codes - 5xx</p>

<p>&lt;ul&gt;
&lt;li&gt;500 - Internal Server Error</p>

<p>&lt;ul&gt;
&lt;li&gt;General catch-all for thrown exceptions&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;503 - Service Unavailable</p>

<p>&lt;ul&gt;
&lt;li&gt;Service cannot be used at the time of the request&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;</p>

<p>&lt;h3&gt;What is REST?&lt;/h3&gt;</p>

<p>&lt;p&gt;REST stands for &lt;strong&gt;Re&lt;/strong&gt;presentational &lt;strong&gt;S&lt;/strong&gt;tate &lt;strong&gt;T&lt;/strong&gt;ransfer. For the best understanding of the REST architecture, I would refer to man who came up with the idea, &lt;a href=&rdquo;<a href="http://www.ics.uci.edu/%7Efielding/&amp;quot;&amp;gt;Roy">http://www.ics.uci.edu/%7Efielding/&amp;quot;&amp;gt;Roy</a> Thomas Fielding&lt;/a&gt;. In his &lt;a href=&ldquo;<a href="http://www.ics.uci.edu/%7Efielding/pubs/dissertation/top.htm&amp;quot;&amp;gt;dissertation&amp;lt;/a&amp;gt;%5B&amp;lt;sup&amp;gt;1%5D,_Architectural&amp;lt;/sup">http://www.ics.uci.edu/%7Efielding/pubs/dissertation/top.htm&amp;quot;&amp;gt;dissertation&amp;lt;/a&amp;gt;[&amp;lt;sup&amp;gt;1],_Architectural&amp;lt;/sup</a>&gt; Styles and the Design of Network-based Software Architectures_, details on REST can be found in &lt;a href=&rdquo;<a href="http://www.ics.uci.edu/%7Efielding/pubs/dissertation/rest_arch_style.htm&amp;quot;&amp;gt;chapter">http://www.ics.uci.edu/%7Efielding/pubs/dissertation/rest_arch_style.htm&amp;quot;&amp;gt;chapter</a> 5&lt;/a&gt;.&lt;/p&gt;</p>

<p>&lt;p&gt;REST works on the basic principle of resources. A resource can be anything from a person, to a task, to a blog post. While, REST does not have an official standard that must be followed there are best practices and recommendations put forth in the dissertations and the RFC, amongst other places on the internet. I will not attempt to set for any of those in these guides as I am just trying to show the basic functionality of REST APIs in implemented in different languages. Even though there isn&amp;rsquo;t a set standard there are six defined constraints that attempt to define what exactly makes a RESTful API.&lt;/p&gt;</p>

<p>&lt;p&gt;The six constraints are:&lt;/p&gt;</p>

<p>&lt;ol&gt;
&lt;li&gt;Client-Server</p>

<p>&lt;ul&gt;
&lt;li&gt;This one deals with the separation of concern between the client and server. If the interface between the two remains unchanged then the client and/or server can be replaced and developed independently of each other.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Stateless</p>

<p>&lt;ul&gt;
&lt;li&gt;By definition, REST means statelessness; therefore the state is handle the request is embedded in the request itself.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Cache</p>

<p>&lt;ul&gt;
&lt;li&gt;This one basically states that a resource must be cacheable and define themselves as such to the client.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Uniform Interface</p>

<p>&lt;ul&gt;
&lt;li&gt;This one defines the interface between the client and server that allows the two to be decoupled from each other. Uniform Interface can be further described by four interface constraints:</p>

<p>&lt;ol&gt;
&lt;li&gt;Identification of Resources</p>

<p>&lt;ul&gt;
&lt;li&gt;Resources are identified in requests using URIs&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Manipulation of Resources through Representations</p>

<p>&lt;ul&gt;
&lt;li&gt;Providing you have permission to, you should have enough information to modify or delete a resource once given the representation of the resource&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Self-descriptive messages</p>

<p>&lt;ul&gt;
&lt;li&gt;States that each request/response describes how to process each message&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Hypermedia as the engine of application state (HATEOAS)</p>

<p>&lt;ul&gt;
&lt;li&gt;HATEOAS states that the client should be able to interact with the service entirely through hypermedia.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Layered System</p>

<p>&lt;ul&gt;
&lt;li&gt;The system should be composed of hierarchical layers by constraining component behavior such that each component cannot interact with any layer beyond the immediate layer in which they are interacting with. So, the client would not be able to interact directly with the end server if there is a cache server in between them. The client would interact with the cache server which would in turn interact with the server.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Code-On-Demand (Optional)</p>

<p>&lt;ul&gt;
&lt;li&gt;Basically, this states that additional functionality can be distributed in the form of scripts through the API.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;</p>

<p>&lt;h3&gt;Examples of REST&lt;/h3&gt;</p>

<p>&lt;p&gt;The remaining gudies will cover the creatation of a task list REST web service. Here we will look at a few examples that will utilize the task list example.&lt;/p&gt;</p>

<p>&lt;p&gt;If we wanted to get a list of all task, we would utilize the GET HTTP method:&lt;/p&gt;
&lt;div class=&ldquo;highlight&rdquo;&gt;&lt;pre&gt;&lt;code class=&ldquo;text language-text&rdquo; data-lang=&ldquo;text&rdquo;&gt;GET <a href="http://example.com/tasks">http://example.com/tasks</a> HTTP/1.1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Say we wanted to create a new task, for that we would utilize the POST HTTP method:&lt;/p&gt;
&lt;div class=&ldquo;highlight&rdquo;&gt;&lt;pre&gt;&lt;code class=&ldquo;xml language-xml&rdquo; data-lang=&ldquo;xml&rdquo;&gt;POST <a href="http://example.com/tasks">http://example.com/tasks</a> HTTP/1.1</p>

<p>&lt;span class=&ldquo;cp&rdquo;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot;?&amp;gt;&lt;/span&gt;
&lt;span class=&ldquo;nt&rdquo;&gt;&amp;lt;task&amp;gt;&lt;/span&gt;
    &lt;span class=&ldquo;nt&rdquo;&gt;&amp;lt;name&amp;gt;&lt;/span&gt;Some Name Here&lt;span class=&ldquo;nt&rdquo;&gt;&amp;lt;/name&amp;gt;&lt;/span&gt;
&lt;span class=&ldquo;nt&rdquo;&gt;&amp;lt;/task&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If there is a specific task that you would like to see, we would use GET like above and provide it with the task_number:&lt;/p&gt;
&lt;div class=&ldquo;highlight&rdquo;&gt;&lt;pre&gt;&lt;code class=&ldquo;xml language-xml&rdquo; data-lang=&ldquo;xml&rdquo;&gt;GET <a href="http://example.com/tasks/12345">http://example.com/tasks/12345</a> HTTP/1.1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To update the name of the task that we just retrieve we would use the PUT verb and could do something like:&lt;/p&gt;
&lt;div class=&ldquo;highlight&rdquo;&gt;&lt;pre&gt;&lt;code class=&ldquo;xml language-xml&rdquo; data-lang=&ldquo;xml&rdquo;&gt;PUT <a href="http://example.com/tasks/12345">http://example.com/tasks/12345</a> HTTP/1.1</p>

<p>&lt;span class=&ldquo;cp&rdquo;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot;?&amp;gt;&lt;/span&gt;
&lt;span class=&ldquo;nt&rdquo;&gt;&amp;lt;task&amp;gt;&lt;/span&gt;
    &lt;span class=&ldquo;nt&rdquo;&gt;&amp;lt;name&amp;gt;&lt;/span&gt;New Name Here&lt;span class=&ldquo;nt&rdquo;&gt;&amp;lt;/name&amp;gt;&lt;/span&gt;
&lt;span class=&ldquo;nt&rdquo;&gt;&amp;lt;/task&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And assuming we had permission to do so, we can delete it by, you guessed it, the DELETE method:&lt;/p&gt;
&lt;div class=&ldquo;highlight&rdquo;&gt;&lt;pre&gt;&lt;code class=&ldquo;xml language-xml&rdquo; data-lang=&ldquo;xml&rdquo;&gt;DELETE <a href="http://example.com/tasks/12345">http://example.com/tasks/12345</a> HTTP/1.1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For further examples, follow along with the rest of the series and see how we go about implementing a basic REST API for tasks, and then take it a step further and see how do implement the same API across different languages.&lt;/p&gt;</p>

<p>&lt;h3&gt;References:&lt;/h3&gt;</p>

<p>&lt;p&gt;[&lt;sup&gt;1]:&lt;/sup&gt; Fielding, Roy Thomas. &lt;em&gt;Architectural Styles and the Design of Network-based Software Architectures&lt;/em&gt;. Doctoral dissertation, University of California, Irvine, 2000.&lt;/p&gt;</p>

]]></content>
 </entry>
 
 <entry>
   <id>http://utopianconcept.com//posts/creating-a-wix-installer-for-a-.net-web-project</id>
   <link type="text/html" rel="alternate" href="http://utopianconcept.com/posts/creating-a-wix-installer-for-a-.net-web-project"/>
   <title>Creating a WiX installer for a .NET Web Project</title>
   <published>2013-08-12T00:00:00-04:00</published>
   <updated>2013-08-12T00:00:00-04:00</updated>
   <summary type="html">&lt;p&gt;The other day I was wrapping up some changes to a production web service at a clients, got ready to fill out the deployment instructions when I noticed that there was no installer package or previous deployment plan in place and this was a service that had been in production for quite some time now. The client has since started using WiX for all of their deployment packages.&lt;/p&gt;

&lt;p&gt;With that being said, I figured I would share the steps I used to create the WiX installer for this web service I was getting ready to deploy.&lt;/p&gt;

&lt;p&gt;First create a new WiX project in the solution where the web project is.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://farm8.staticflickr.com/7326/9472180915_ef89a463d3.jpg&quot; alt=&quot;Add New Project&quot;&gt;&lt;/p&gt;

&lt;p&gt;I like to contain all my &amp;ldquo;settings&amp;rdquo; in an include file for easier maintenance. To do so the next step I do is to create an include file called Configuration.wxi.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://farm3.staticflickr.com/2853/9474968680_48cb47c7d1.jpg&quot; alt=&quot;Add New Item&quot;&gt;&lt;/p&gt;

&lt;p&gt;Some of the basic elements I define in the configuration include file are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Product Name - Name of the product you are installing&lt;/li&gt;
&lt;li&gt;Product Title - Title of the product you are installing&lt;/li&gt;
&lt;li&gt;Manufacturer - Your company name&lt;/li&gt;
&lt;li&gt;App URL - URL to point to more information about the application or the application itself&lt;/li&gt;
&lt;li&gt;Description - Brief overview of what the application is for&lt;/li&gt;
&lt;li&gt;Comments - Additional note about the application&lt;/li&gt;
&lt;li&gt;Install Version - Version of the product. This can be auto incremented with the use of certain build scripts but for this client they controlled this setting manually.&lt;/li&gt;
&lt;li&gt;Upgrade Code - Product GUID used for tracking upgrades&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So you will end up with something that looks along the lines of this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;xml language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&amp;quot; 1.0&amp;quot; encoding=&amp;quot; utf-8&amp;quot;?&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;Include&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;cp&quot;&gt;&amp;lt;? define ProductName=&amp;quot;Business Web Service&amp;quot; ?&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;cp&quot;&gt;&amp;lt;? define ProductTitle=&amp;quot;Business Web Service&amp;quot; ?&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;cp&quot;&gt;&amp;lt;? define Manufacturer=&amp;quot;Business Name, Inc.&amp;quot; ?&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;cp&quot;&gt;&amp;lt;? define AppURL=&amp;quot;http://www.businessname.com&amp;quot; ?&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;cp&quot;&gt;&amp;lt;? define Description=&amp;quot;Installer for Business Web Service&amp;quot; ?&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;cp&quot;&gt;&amp;lt;? define Comments=&amp;quot;Business Web Service Installer&amp;quot; ?&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;cp&quot;&gt;&amp;lt;? define InstallVersion=&amp;quot;1.0.0.0 ?&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;cp&quot;&gt;&amp;lt;? define UpgradeCode=&amp;quot;YOUR-GUID-HERE&amp;quot; ?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/Include&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Next thing we need to do is update our references. We will want to add two references.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The project

&lt;ul&gt;
&lt;li&gt;Change Harvest to False&lt;/li&gt;
&lt;li&gt;Change Project Output Groups to None&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;WiXUIExtension&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now we need to edit the WiX installer project file. At the top of the project file we need to enable project havesting. To the top of the file in the PropertyGroup element add:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;xml language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&amp;quot; 1.0&amp;quot; encoding=&amp;quot; utf-8&amp;quot;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;Project&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ToolsVersion=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot; 4.0&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;DefaultTargets=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot; Build&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xmlns=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot; http://schemas.microsoft.com/developer/msbuild/2003 &amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;PropertyGroup&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt; EnableProjectHarvesting&amp;gt;&lt;/span&gt;True &lt;span class=&quot;nt&quot;&gt;&amp;lt;/EnableProjectHarvesting&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Under the ItemGroup that references your projects solution we need to add a tag to let WiX know that this is a web project. This will be used for conditional statements later on:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;xml language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;ItemGroup&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt; ProjectReference&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Include =&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;..\BusinessWebService\BusinessWebService.csproj &amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt; Name&amp;gt;&lt;/span&gt;BusinessWebService &lt;span class=&quot;nt&quot;&gt;&amp;lt;/Name&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt; Project&amp;gt;&lt;/span&gt;{PROJECT-GUID-HERE} &lt;span class=&quot;nt&quot;&gt;&amp;lt;/Project&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt; Private&amp;gt;&lt;/span&gt;True &lt;span class=&quot;nt&quot;&gt;&amp;lt;/Private&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt; DoNotHarvest&amp;gt;&lt;/span&gt;True &lt;span class=&quot;nt&quot;&gt;&amp;lt;/DoNotHarvest&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt; RefProjectOutputGroups&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;/ RefProjectOutputGroups&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt; RefTargetDir&amp;gt;&lt;/span&gt;INSTALLFOLDER &lt;span class=&quot;nt&quot;&gt;&amp;lt;/RefTargetDir&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt; WebProject&amp;gt;&lt;/span&gt;True &lt;span class=&quot;nt&quot;&gt;&amp;lt;/WebProject&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/ ProjectReference&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/ItemGroup&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Next we need to add a custom target that will get trigger before the build. To do so at the end of the file add:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;xml language-xml&quot; data-lang=&quot;xml&quot;&gt;      &lt;span class=&quot;nt&quot;&gt;&amp;lt;Target&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot; BeforeBuild&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;/Target&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/Project&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We need to define four elements in this target. For more detailed information on these elements visit the wix documentation.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;MSBuild - Sets up the conditional to look for the WebProject condition that we setup previously&lt;/li&gt;
&lt;li&gt;PropertyGroup - Used to define a constant that points to the PackageDir&lt;/li&gt;
&lt;li&gt;ItemGroup - Used to specify the input paths for the linker&lt;/li&gt;
&lt;li&gt;HeatDirectory - Controls the collection of files needed to be included in this web project. Heat is a time saver as otherwise you would have to specify all of your files manually.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For my project, I ended up with something that looks like this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;xml language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;Target&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot; BeforeBuild&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt; MSBuild&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Projects =&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;%(ProjectReference.FullPath) &amp;quot;&lt;/span&gt;
             &lt;span class=&quot;na&quot;&gt;Targets=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot; Package&amp;quot;&lt;/span&gt;
             &lt;span class=&quot;na&quot;&gt;Properties=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot; Configuration=$(Configuration);Platform=AnyCPU &amp;quot;&lt;/span&gt;
             &lt;span class=&quot;na&quot;&gt;Condition=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot; &amp;#39;%(ProjectReference.WebProject)&amp;#39;==&amp;#39;True&amp;#39;&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt; PropertyGroup&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt; DefineConstants&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Condition =&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;#39;%(ProjectReference.WebProject)&amp;#39;==&amp;#39;True&amp;#39; &amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        %(ProjectReference.Name).PackageDir=%(ProjectReference.RootDir)%(ProjectReference.Directory)obj\$(Configuration)\Package\PackageTmp\
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;/ DefineConstants&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/ PropertyGroup&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt; ItemGroup&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt; LinkerBindInputPaths&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Include=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot; %(ProjectReference.RootDir)%(ProjectReference.Directory)obj\$(Configuration)\Package\PackageTmp\ &amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/ ItemGroup&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt; HeatDirectory&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;OutputFile =&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;%(ProjectReference.Filename).wxs &amp;quot;&lt;/span&gt;
                   &lt;span class=&quot;na&quot;&gt;Directory=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot; %(ProjectReference.RootDir)%(ProjectReference.Directory)obj\$(Configuration)\Package\PackageTmp\ &amp;quot;&lt;/span&gt;
                   &lt;span class=&quot;na&quot;&gt;DirectoryRefId=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot; INSTALLLOCATION&amp;quot;&lt;/span&gt;
                   &lt;span class=&quot;na&quot;&gt;ComponentGroupName=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot; %(ProjectReference.Filename)_Project&amp;quot;&lt;/span&gt;
                   &lt;span class=&quot;na&quot;&gt;AutoGenerateGuids=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot; false&amp;quot;&lt;/span&gt;
                   &lt;span class=&quot;na&quot;&gt;GenerateGuidsNow=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot; true&amp;quot;&lt;/span&gt;
                   &lt;span class=&quot;na&quot;&gt;SuppressCom=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot; true&amp;quot;&lt;/span&gt;
                   &lt;span class=&quot;na&quot;&gt;SuppressFragments=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot; true&amp;quot;&lt;/span&gt;
                   &lt;span class=&quot;na&quot;&gt;SuppressRegistry=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot; true&amp;quot;&lt;/span&gt;
                   &lt;span class=&quot;na&quot;&gt;SuppressRootDirectory=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot; true&amp;quot;&lt;/span&gt;
                   &lt;span class=&quot;na&quot;&gt;ToolPath=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot; $(WiXToolPath)&amp;quot;&lt;/span&gt;
                   &lt;span class=&quot;na&quot;&gt;Condition=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot; &amp;#39;%(ProjectReference.WebProject)&amp;#39;==&amp;#39;True&amp;#39;&amp;quot;&lt;/span&gt;
                   &lt;span class=&quot;na&quot;&gt;Transforms=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot; %(ProjectReference.Filename).xsl&amp;quot;&lt;/span&gt;
                   &lt;span class=&quot;na&quot;&gt;PreprocessorVariable=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot; var.%(ProjectReference.Name).PackageDir&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/Target&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Normally, you would want it to auto generate the GUIDs for you but that option can not be used if your installing to a non-standard directory location. Once the rest of the pieces are in place, we will get a new file in our projects directory that you will need to manually include to your projects source tree once we build it for the first time.&lt;/p&gt;

&lt;p&gt;Next I need to add an XSL file to our project that will control the omitting of certain files that I don&amp;rsquo;t want to include in the file installer. For this project, since the client doesn&amp;rsquo;t want to push out xml or config files. I will omit them from the installer using an Xsl Stylesheet defined in the Transorms property earlier in the Target element of the project file.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://farm3.staticflickr.com/2840/9472180923_756dc0b1a7.jpg&quot; alt=&quot;Add New Item&quot;&gt;&lt;/p&gt;

&lt;p&gt;This file will look like:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;xml language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&amp;quot; 1.0&amp;quot; encoding=&amp;quot; utf-8&amp;quot;?&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;xsl:stylesheet&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;version=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot; 1.0&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xmlns:xsl=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot; http://www.w3.org/1999/XSL/Transform&amp;quot;&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;xmlns:wix=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot; http://schemas.microsoft.com/wix/2006/wi&amp;quot;&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;xmlns:msxsl=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot; urn:schemas-microsoft-com:xslt&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;exclude-result-prefixes=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot; msxsl&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;nt&quot;&gt;&amp;lt;xsl:output&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;method=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot; xml&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;indent=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot; yes&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;c&quot;&gt;&amp;lt;!--Identity Transform--&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;xsl:template&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;match=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot; @*|node()&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt; xsl:copy&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt; xsl:apply-templates&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;select =&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;@*|node() &amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/ xsl:copy&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/xsl:template&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;c&quot;&gt;&amp;lt;!--Set up keys for ignoring various file types--&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;xsl:key&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot; config-search&amp;quot;&lt;/span&gt;
           &lt;span class=&quot;na&quot;&gt;match=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot; wix:Component[contains(wix:File/@Source, &amp;#39;.config&amp;#39;) and not(contains(wix:File/@Source, &amp;#39;.production&amp;#39;))]&amp;quot;&lt;/span&gt;
           &lt;span class=&quot;na&quot;&gt;use=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot; @Id&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;xsl:key&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot; wixlib-search&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;match=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot; wix:Component[contains(wix:File/@Source, &amp;#39;.wixlib&amp;#39;)]&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;use =&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;@Id &amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;xsl:key&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot; svn-search&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;match=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot; wix:Component[ancestor::wix:Directory/@Name = &amp;#39;.svn&amp;#39;]&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;use =&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;@Id &amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;xsl:key&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot; xml-search&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;match=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot; wix:Component[contains(wix:File/@Source, &amp;#39;.xml&amp;#39;)]&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;use =&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;@Id &amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;c&quot;&gt;&amp;lt;!--Match and ignore .config files--&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;xsl:template&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;match=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot; wix:Component[key(&amp;#39;config-search&amp;#39;, @Id)]&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;xsl:template&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;match=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot; wix:ComponentRef[key(&amp;#39;config-search&amp;#39;, @Id)] &amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;c&quot;&gt;&amp;lt;!--Match and ignore leftover .wixlib files on developer machines --&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;xsl:template&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;match=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot; wix:Component[key(&amp;#39;wixlib-search&amp;#39;, @Id)]&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;xsl:template&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;match=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot; wix:ComponentRef[key(&amp;#39;wixlib-search&amp;#39;, @Id)] &amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;c&quot;&gt;&amp;lt;!--Match and ignore “.svn&amp;quot; directories on build machines --&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;xsl:template&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;match=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot; wix:Directory[@Name = &amp;#39;.svn&amp;#39;]&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;xsl:template&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;match=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot; wix:ComponentRef[key(&amp;#39;svn-search&amp;#39;, @Id)]&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;c&quot;&gt;&amp;lt;!--Match and ignore leftover .xml files on developer machines --&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;xsl:template&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;match=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot; wix:Component[key(&amp;#39;xml-search&amp;#39;, @Id)]&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;xsl:template&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;match=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot; wix:ComponentRef[key(&amp;#39;xml-search&amp;#39;, @Id)]&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;/xsl:stylesheet&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now we can move to our final file which should be named Product.wxs. This file is the key to controlling all aspects of the installer. The first thing we need to include is our include file. We will do so using the &amp;lt;?include ?&amp;gt; directive.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;xml language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&amp;quot; 1.0&amp;quot; encoding=&amp;quot; UTF-8&amp;quot;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;WiX&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xmlns=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot; http://schemas.microsoft.com/wix/2006/wi&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;cp&quot;&gt;&amp;lt;?include Configuration.wxi ?&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With our configuration file included, we will now have access to all of the variables that we defined earlier in the form of $(var.VariableName). Let&amp;rsquo;s configure the Product element next.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;xml language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;Product&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot; *&amp;quot;&lt;/span&gt;
           &lt;span class=&quot;na&quot;&gt;Name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot; $(var.ProductName)&amp;quot;&lt;/span&gt;
           &lt;span class=&quot;na&quot;&gt;Language=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot; 1033&amp;quot;&lt;/span&gt;
           &lt;span class=&quot;na&quot;&gt;Version=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot; $(var.InstallVersion)&amp;quot;&lt;/span&gt;
           &lt;span class=&quot;na&quot;&gt;Manufacturer=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot; $(var.Manufacturer)&amp;quot;&lt;/span&gt;
           &lt;span class=&quot;na&quot;&gt;UpgradeCode=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot; $(var.UpgradeCode)&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Next we will move onto the Package element:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;xml language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;Package&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot; *&amp;quot;&lt;/span&gt;
             &lt;span class=&quot;na&quot;&gt;Description=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot; $(var.Description)&amp;quot;&lt;/span&gt;
             &lt;span class=&quot;na&quot;&gt;Comments=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot; $(var.Comments)&amp;quot;&lt;/span&gt;
             &lt;span class=&quot;na&quot;&gt;Manufacturer=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot; $(var.Manufacturer)&amp;quot;&lt;/span&gt;
             &lt;span class=&quot;na&quot;&gt;InstallerVersion=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot; 200&amp;quot;&lt;/span&gt;
             &lt;span class=&quot;na&quot;&gt;Languages=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot; 1033&amp;quot;&lt;/span&gt;
             &lt;span class=&quot;na&quot;&gt;Compressed=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot; yes&amp;quot;&lt;/span&gt;
             &lt;span class=&quot;na&quot;&gt;SummaryCodepage=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot; 1252&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;From there we can go on to configure our Feature element:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;xml language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;Feature&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot; ProductFeature&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Title=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot; $(var.ProductTitle)&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Level=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot; 1&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt; ComponentGroupRef&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Id =&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;BusinessWebService_Project &amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt; ComponentGroupRef&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Id =&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Product.Generated &amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/ Feature&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The default Product file comes with a Fragment whose Id is called ProductComponents. We can remove that since we will be using Heat to create that fragment. Otherwise we would have to specify each of our files in that fragment manually.&lt;/p&gt;

&lt;p&gt;Now we need to configure the InstallLocation to point to where we want to program to be installed initially.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;xml language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt; Directory&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Id =&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot; TARGETDIR &amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Name =&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot; SourceDir &amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt; Directory&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Id =&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;PROGRAMFILES &amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Name =&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Program Files &amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt; Directory&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Id =&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;INSTALLLOCATION &amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Name =&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;BusinessWebService &amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;/ Directory &amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/ Directory &amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We also need to declare a property that will tell WiX where the installlocation is:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;xml language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;Property&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot; WIXUI_INSTALLDIR&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot; INSTALLLOCATION&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After that you should be ready to build your installer. Upon a successful build you will need to include the file that was generated in the project&amp;rsquo;s folder. You will end up with a structure like:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://farm4.staticflickr.com/3825/9474968650_c528df53ff_s.jpg&quot; alt=&quot;Add New Item&quot;&gt;&lt;/p&gt;

&lt;p&gt;Until next time&amp;hellip;&lt;/p&gt;

&lt;h3&gt;References:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;C Surfleet. (2011, June 30). Simplify Deployment with Visual Studio and WiX [Web log post]. Retrieved from &lt;a href=&quot;http://www.chrissurfleet.co.uk/post/simplify-deployment-with-visual-studio-and-wix.aspx&quot;&gt;http://www.chrissurfleet.co.uk/post/simplify-deployment-with-visual-studio-and-wix.aspx&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</summary>
   <content type="html">&lt;p&gt;The other day I was wrapping up some changes to a production web service at a clients, got ready to fill out the deployment instructions when I noticed that there was no installer package or previous deployment plan in place and this was a service that had been in production for quite some time now. The client has since started using WiX for all of their deployment packages.&lt;/p&gt;

&lt;p&gt;With that being said, I figured I would share the steps I used to create the WiX installer for this web service I was getting ready to deploy.&lt;/p&gt;

&lt;p&gt;First create a new WiX project in the solution where the web project is.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://farm8.staticflickr.com/7326/9472180915_ef89a463d3.jpg&quot; alt=&quot;Add New Project&quot;&gt;&lt;/p&gt;

&lt;p&gt;I like to contain all my &amp;ldquo;settings&amp;rdquo; in an include file for easier maintenance. To do so the next step I do is to create an include file called Configuration.wxi.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://farm3.staticflickr.com/2853/9474968680_48cb47c7d1.jpg&quot; alt=&quot;Add New Item&quot;&gt;&lt;/p&gt;

&lt;p&gt;Some of the basic elements I define in the configuration include file are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Product Name - Name of the product you are installing&lt;/li&gt;
&lt;li&gt;Product Title - Title of the product you are installing&lt;/li&gt;
&lt;li&gt;Manufacturer - Your company name&lt;/li&gt;
&lt;li&gt;App URL - URL to point to more information about the application or the application itself&lt;/li&gt;
&lt;li&gt;Description - Brief overview of what the application is for&lt;/li&gt;
&lt;li&gt;Comments - Additional note about the application&lt;/li&gt;
&lt;li&gt;Install Version - Version of the product. This can be auto incremented with the use of certain build scripts but for this client they controlled this setting manually.&lt;/li&gt;
&lt;li&gt;Upgrade Code - Product GUID used for tracking upgrades&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So you will end up with something that looks along the lines of this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;xml language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&amp;quot; 1.0&amp;quot; encoding=&amp;quot; utf-8&amp;quot;?&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;Include&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;cp&quot;&gt;&amp;lt;? define ProductName=&amp;quot;Business Web Service&amp;quot; ?&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;cp&quot;&gt;&amp;lt;? define ProductTitle=&amp;quot;Business Web Service&amp;quot; ?&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;cp&quot;&gt;&amp;lt;? define Manufacturer=&amp;quot;Business Name, Inc.&amp;quot; ?&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;cp&quot;&gt;&amp;lt;? define AppURL=&amp;quot;http://www.businessname.com&amp;quot; ?&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;cp&quot;&gt;&amp;lt;? define Description=&amp;quot;Installer for Business Web Service&amp;quot; ?&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;cp&quot;&gt;&amp;lt;? define Comments=&amp;quot;Business Web Service Installer&amp;quot; ?&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;cp&quot;&gt;&amp;lt;? define InstallVersion=&amp;quot;1.0.0.0 ?&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;cp&quot;&gt;&amp;lt;? define UpgradeCode=&amp;quot;YOUR-GUID-HERE&amp;quot; ?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/Include&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Next thing we need to do is update our references. We will want to add two references.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The project

&lt;ul&gt;
&lt;li&gt;Change Harvest to False&lt;/li&gt;
&lt;li&gt;Change Project Output Groups to None&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;WiXUIExtension&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now we need to edit the WiX installer project file. At the top of the project file we need to enable project havesting. To the top of the file in the PropertyGroup element add:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;xml language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&amp;quot; 1.0&amp;quot; encoding=&amp;quot; utf-8&amp;quot;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;Project&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ToolsVersion=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot; 4.0&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;DefaultTargets=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot; Build&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xmlns=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot; http://schemas.microsoft.com/developer/msbuild/2003 &amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;PropertyGroup&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt; EnableProjectHarvesting&amp;gt;&lt;/span&gt;True &lt;span class=&quot;nt&quot;&gt;&amp;lt;/EnableProjectHarvesting&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Under the ItemGroup that references your projects solution we need to add a tag to let WiX know that this is a web project. This will be used for conditional statements later on:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;xml language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;ItemGroup&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt; ProjectReference&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Include =&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;..\BusinessWebService\BusinessWebService.csproj &amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt; Name&amp;gt;&lt;/span&gt;BusinessWebService &lt;span class=&quot;nt&quot;&gt;&amp;lt;/Name&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt; Project&amp;gt;&lt;/span&gt;{PROJECT-GUID-HERE} &lt;span class=&quot;nt&quot;&gt;&amp;lt;/Project&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt; Private&amp;gt;&lt;/span&gt;True &lt;span class=&quot;nt&quot;&gt;&amp;lt;/Private&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt; DoNotHarvest&amp;gt;&lt;/span&gt;True &lt;span class=&quot;nt&quot;&gt;&amp;lt;/DoNotHarvest&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt; RefProjectOutputGroups&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;/ RefProjectOutputGroups&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt; RefTargetDir&amp;gt;&lt;/span&gt;INSTALLFOLDER &lt;span class=&quot;nt&quot;&gt;&amp;lt;/RefTargetDir&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt; WebProject&amp;gt;&lt;/span&gt;True &lt;span class=&quot;nt&quot;&gt;&amp;lt;/WebProject&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/ ProjectReference&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/ItemGroup&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Next we need to add a custom target that will get trigger before the build. To do so at the end of the file add:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;xml language-xml&quot; data-lang=&quot;xml&quot;&gt;      &lt;span class=&quot;nt&quot;&gt;&amp;lt;Target&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot; BeforeBuild&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;/Target&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/Project&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We need to define four elements in this target. For more detailed information on these elements visit the wix documentation.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;MSBuild - Sets up the conditional to look for the WebProject condition that we setup previously&lt;/li&gt;
&lt;li&gt;PropertyGroup - Used to define a constant that points to the PackageDir&lt;/li&gt;
&lt;li&gt;ItemGroup - Used to specify the input paths for the linker&lt;/li&gt;
&lt;li&gt;HeatDirectory - Controls the collection of files needed to be included in this web project. Heat is a time saver as otherwise you would have to specify all of your files manually.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For my project, I ended up with something that looks like this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;xml language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;Target&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot; BeforeBuild&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt; MSBuild&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Projects =&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;%(ProjectReference.FullPath) &amp;quot;&lt;/span&gt;
             &lt;span class=&quot;na&quot;&gt;Targets=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot; Package&amp;quot;&lt;/span&gt;
             &lt;span class=&quot;na&quot;&gt;Properties=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot; Configuration=$(Configuration);Platform=AnyCPU &amp;quot;&lt;/span&gt;
             &lt;span class=&quot;na&quot;&gt;Condition=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot; &amp;#39;%(ProjectReference.WebProject)&amp;#39;==&amp;#39;True&amp;#39;&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt; PropertyGroup&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt; DefineConstants&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Condition =&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;#39;%(ProjectReference.WebProject)&amp;#39;==&amp;#39;True&amp;#39; &amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        %(ProjectReference.Name).PackageDir=%(ProjectReference.RootDir)%(ProjectReference.Directory)obj\$(Configuration)\Package\PackageTmp\
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;/ DefineConstants&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/ PropertyGroup&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt; ItemGroup&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt; LinkerBindInputPaths&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Include=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot; %(ProjectReference.RootDir)%(ProjectReference.Directory)obj\$(Configuration)\Package\PackageTmp\ &amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/ ItemGroup&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt; HeatDirectory&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;OutputFile =&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;%(ProjectReference.Filename).wxs &amp;quot;&lt;/span&gt;
                   &lt;span class=&quot;na&quot;&gt;Directory=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot; %(ProjectReference.RootDir)%(ProjectReference.Directory)obj\$(Configuration)\Package\PackageTmp\ &amp;quot;&lt;/span&gt;
                   &lt;span class=&quot;na&quot;&gt;DirectoryRefId=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot; INSTALLLOCATION&amp;quot;&lt;/span&gt;
                   &lt;span class=&quot;na&quot;&gt;ComponentGroupName=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot; %(ProjectReference.Filename)_Project&amp;quot;&lt;/span&gt;
                   &lt;span class=&quot;na&quot;&gt;AutoGenerateGuids=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot; false&amp;quot;&lt;/span&gt;
                   &lt;span class=&quot;na&quot;&gt;GenerateGuidsNow=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot; true&amp;quot;&lt;/span&gt;
                   &lt;span class=&quot;na&quot;&gt;SuppressCom=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot; true&amp;quot;&lt;/span&gt;
                   &lt;span class=&quot;na&quot;&gt;SuppressFragments=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot; true&amp;quot;&lt;/span&gt;
                   &lt;span class=&quot;na&quot;&gt;SuppressRegistry=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot; true&amp;quot;&lt;/span&gt;
                   &lt;span class=&quot;na&quot;&gt;SuppressRootDirectory=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot; true&amp;quot;&lt;/span&gt;
                   &lt;span class=&quot;na&quot;&gt;ToolPath=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot; $(WiXToolPath)&amp;quot;&lt;/span&gt;
                   &lt;span class=&quot;na&quot;&gt;Condition=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot; &amp;#39;%(ProjectReference.WebProject)&amp;#39;==&amp;#39;True&amp;#39;&amp;quot;&lt;/span&gt;
                   &lt;span class=&quot;na&quot;&gt;Transforms=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot; %(ProjectReference.Filename).xsl&amp;quot;&lt;/span&gt;
                   &lt;span class=&quot;na&quot;&gt;PreprocessorVariable=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot; var.%(ProjectReference.Name).PackageDir&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/Target&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Normally, you would want it to auto generate the GUIDs for you but that option can not be used if your installing to a non-standard directory location. Once the rest of the pieces are in place, we will get a new file in our projects directory that you will need to manually include to your projects source tree once we build it for the first time.&lt;/p&gt;

&lt;p&gt;Next I need to add an XSL file to our project that will control the omitting of certain files that I don&amp;rsquo;t want to include in the file installer. For this project, since the client doesn&amp;rsquo;t want to push out xml or config files. I will omit them from the installer using an Xsl Stylesheet defined in the Transorms property earlier in the Target element of the project file.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://farm3.staticflickr.com/2840/9472180923_756dc0b1a7.jpg&quot; alt=&quot;Add New Item&quot;&gt;&lt;/p&gt;

&lt;p&gt;This file will look like:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;xml language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&amp;quot; 1.0&amp;quot; encoding=&amp;quot; utf-8&amp;quot;?&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;xsl:stylesheet&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;version=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot; 1.0&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xmlns:xsl=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot; http://www.w3.org/1999/XSL/Transform&amp;quot;&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;xmlns:wix=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot; http://schemas.microsoft.com/wix/2006/wi&amp;quot;&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;xmlns:msxsl=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot; urn:schemas-microsoft-com:xslt&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;exclude-result-prefixes=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot; msxsl&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;nt&quot;&gt;&amp;lt;xsl:output&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;method=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot; xml&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;indent=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot; yes&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;c&quot;&gt;&amp;lt;!--Identity Transform--&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;xsl:template&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;match=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot; @*|node()&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt; xsl:copy&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt; xsl:apply-templates&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;select =&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;@*|node() &amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/ xsl:copy&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/xsl:template&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;c&quot;&gt;&amp;lt;!--Set up keys for ignoring various file types--&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;xsl:key&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot; config-search&amp;quot;&lt;/span&gt;
           &lt;span class=&quot;na&quot;&gt;match=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot; wix:Component[contains(wix:File/@Source, &amp;#39;.config&amp;#39;) and not(contains(wix:File/@Source, &amp;#39;.production&amp;#39;))]&amp;quot;&lt;/span&gt;
           &lt;span class=&quot;na&quot;&gt;use=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot; @Id&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;xsl:key&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot; wixlib-search&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;match=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot; wix:Component[contains(wix:File/@Source, &amp;#39;.wixlib&amp;#39;)]&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;use =&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;@Id &amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;xsl:key&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot; svn-search&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;match=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot; wix:Component[ancestor::wix:Directory/@Name = &amp;#39;.svn&amp;#39;]&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;use =&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;@Id &amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;xsl:key&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot; xml-search&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;match=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot; wix:Component[contains(wix:File/@Source, &amp;#39;.xml&amp;#39;)]&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;use =&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;@Id &amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;c&quot;&gt;&amp;lt;!--Match and ignore .config files--&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;xsl:template&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;match=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot; wix:Component[key(&amp;#39;config-search&amp;#39;, @Id)]&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;xsl:template&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;match=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot; wix:ComponentRef[key(&amp;#39;config-search&amp;#39;, @Id)] &amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;c&quot;&gt;&amp;lt;!--Match and ignore leftover .wixlib files on developer machines --&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;xsl:template&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;match=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot; wix:Component[key(&amp;#39;wixlib-search&amp;#39;, @Id)]&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;xsl:template&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;match=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot; wix:ComponentRef[key(&amp;#39;wixlib-search&amp;#39;, @Id)] &amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;c&quot;&gt;&amp;lt;!--Match and ignore “.svn&amp;quot; directories on build machines --&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;xsl:template&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;match=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot; wix:Directory[@Name = &amp;#39;.svn&amp;#39;]&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;xsl:template&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;match=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot; wix:ComponentRef[key(&amp;#39;svn-search&amp;#39;, @Id)]&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;c&quot;&gt;&amp;lt;!--Match and ignore leftover .xml files on developer machines --&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;xsl:template&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;match=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot; wix:Component[key(&amp;#39;xml-search&amp;#39;, @Id)]&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;xsl:template&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;match=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot; wix:ComponentRef[key(&amp;#39;xml-search&amp;#39;, @Id)]&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;/xsl:stylesheet&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now we can move to our final file which should be named Product.wxs. This file is the key to controlling all aspects of the installer. The first thing we need to include is our include file. We will do so using the &amp;lt;?include ?&amp;gt; directive.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;xml language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&amp;quot; 1.0&amp;quot; encoding=&amp;quot; UTF-8&amp;quot;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;WiX&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xmlns=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot; http://schemas.microsoft.com/wix/2006/wi&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;cp&quot;&gt;&amp;lt;?include Configuration.wxi ?&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With our configuration file included, we will now have access to all of the variables that we defined earlier in the form of $(var.VariableName). Let&amp;rsquo;s configure the Product element next.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;xml language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;Product&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot; *&amp;quot;&lt;/span&gt;
           &lt;span class=&quot;na&quot;&gt;Name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot; $(var.ProductName)&amp;quot;&lt;/span&gt;
           &lt;span class=&quot;na&quot;&gt;Language=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot; 1033&amp;quot;&lt;/span&gt;
           &lt;span class=&quot;na&quot;&gt;Version=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot; $(var.InstallVersion)&amp;quot;&lt;/span&gt;
           &lt;span class=&quot;na&quot;&gt;Manufacturer=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot; $(var.Manufacturer)&amp;quot;&lt;/span&gt;
           &lt;span class=&quot;na&quot;&gt;UpgradeCode=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot; $(var.UpgradeCode)&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Next we will move onto the Package element:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;xml language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;Package&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot; *&amp;quot;&lt;/span&gt;
             &lt;span class=&quot;na&quot;&gt;Description=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot; $(var.Description)&amp;quot;&lt;/span&gt;
             &lt;span class=&quot;na&quot;&gt;Comments=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot; $(var.Comments)&amp;quot;&lt;/span&gt;
             &lt;span class=&quot;na&quot;&gt;Manufacturer=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot; $(var.Manufacturer)&amp;quot;&lt;/span&gt;
             &lt;span class=&quot;na&quot;&gt;InstallerVersion=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot; 200&amp;quot;&lt;/span&gt;
             &lt;span class=&quot;na&quot;&gt;Languages=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot; 1033&amp;quot;&lt;/span&gt;
             &lt;span class=&quot;na&quot;&gt;Compressed=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot; yes&amp;quot;&lt;/span&gt;
             &lt;span class=&quot;na&quot;&gt;SummaryCodepage=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot; 1252&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;From there we can go on to configure our Feature element:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;xml language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;Feature&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot; ProductFeature&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Title=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot; $(var.ProductTitle)&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Level=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot; 1&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt; ComponentGroupRef&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Id =&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;BusinessWebService_Project &amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt; ComponentGroupRef&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Id =&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Product.Generated &amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/ Feature&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The default Product file comes with a Fragment whose Id is called ProductComponents. We can remove that since we will be using Heat to create that fragment. Otherwise we would have to specify each of our files in that fragment manually.&lt;/p&gt;

&lt;p&gt;Now we need to configure the InstallLocation to point to where we want to program to be installed initially.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;xml language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt; Directory&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Id =&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot; TARGETDIR &amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Name =&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot; SourceDir &amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt; Directory&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Id =&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;PROGRAMFILES &amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Name =&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Program Files &amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt; Directory&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Id =&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;INSTALLLOCATION &amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Name =&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;BusinessWebService &amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;/ Directory &amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/ Directory &amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We also need to declare a property that will tell WiX where the installlocation is:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;xml language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;Property&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot; WIXUI_INSTALLDIR&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot; INSTALLLOCATION&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After that you should be ready to build your installer. Upon a successful build you will need to include the file that was generated in the project&amp;rsquo;s folder. You will end up with a structure like:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://farm4.staticflickr.com/3825/9474968650_c528df53ff_s.jpg&quot; alt=&quot;Add New Item&quot;&gt;&lt;/p&gt;

&lt;p&gt;Until next time&amp;hellip;&lt;/p&gt;

&lt;h3&gt;References:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;C Surfleet. (2011, June 30). Simplify Deployment with Visual Studio and WiX [Web log post]. Retrieved from &lt;a href=&quot;http://www.chrissurfleet.co.uk/post/simplify-deployment-with-visual-studio-and-wix.aspx&quot;&gt;http://www.chrissurfleet.co.uk/post/simplify-deployment-with-visual-studio-and-wix.aspx&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
   <author>
     <name>Ray Clanan</name>
     <uri>http://utopianconcept.com</uri>
   </author>
   <content type="html"><![CDATA[
<p>&lt;p&gt;The other day I was wrapping up some changes to a production web service at a clients, got ready to fill out the deployment instructions when I noticed that there was no installer package or previous deployment plan in place and this was a service that had been in production for quite some time now. The client has since started using WiX for all of their deployment packages.&lt;/p&gt;</p>

<p>&lt;p&gt;With that being said, I figured I would share the steps I used to create the WiX installer for this web service I was getting ready to deploy.&lt;/p&gt;</p>

<p>&lt;p&gt;First create a new WiX project in the solution where the web project is.&lt;/p&gt;</p>

<p>&lt;p&gt;&lt;img src=&ldquo;<a href="http://farm8.staticflickr.com/7326/9472180915_ef89a463d3.jpg">http://farm8.staticflickr.com/7326/9472180915_ef89a463d3.jpg</a>&rdquo; alt=&ldquo;Add New Project&rdquo;&gt;&lt;/p&gt;</p>

<p>&lt;p&gt;I like to contain all my &amp;ldquo;settings&amp;rdquo; in an include file for easier maintenance. To do so the next step I do is to create an include file called Configuration.wxi.&lt;/p&gt;</p>

<p>&lt;p&gt;&lt;img src=&ldquo;<a href="http://farm3.staticflickr.com/2853/9474968680_48cb47c7d1.jpg">http://farm3.staticflickr.com/2853/9474968680_48cb47c7d1.jpg</a>&rdquo; alt=&ldquo;Add New Item&rdquo;&gt;&lt;/p&gt;</p>

<p>&lt;p&gt;Some of the basic elements I define in the configuration include file are:&lt;/p&gt;</p>

<p>&lt;ul&gt;
&lt;li&gt;Product Name - Name of the product you are installing&lt;/li&gt;
&lt;li&gt;Product Title - Title of the product you are installing&lt;/li&gt;
&lt;li&gt;Manufacturer - Your company name&lt;/li&gt;
&lt;li&gt;App URL - URL to point to more information about the application or the application itself&lt;/li&gt;
&lt;li&gt;Description - Brief overview of what the application is for&lt;/li&gt;
&lt;li&gt;Comments - Additional note about the application&lt;/li&gt;
&lt;li&gt;Install Version - Version of the product. This can be auto incremented with the use of certain build scripts but for this client they controlled this setting manually.&lt;/li&gt;
&lt;li&gt;Upgrade Code - Product GUID used for tracking upgrades&lt;/li&gt;
&lt;/ul&gt;</p>

<p>&lt;p&gt;So you will end up with something that looks along the lines of this:&lt;/p&gt;
&lt;div class=&ldquo;highlight&rdquo;&gt;&lt;pre&gt;&lt;code class=&ldquo;xml language-xml&rdquo; data-lang=&ldquo;xml&rdquo;&gt;&lt;span class=&ldquo;cp&rdquo;&gt;&amp;lt;?xml version=&amp;quot; 1.0&amp;quot; encoding=&amp;quot; utf-8&amp;quot;?&amp;gt;&lt;/span&gt;
  &lt;span class=&ldquo;nt&rdquo;&gt;&amp;lt;Include&amp;gt;&lt;/span&gt;
    &lt;span class=&ldquo;cp&rdquo;&gt;&amp;lt;? define ProductName=&amp;quot;Business Web Service&amp;quot; ?&amp;gt;&lt;/span&gt;
    &lt;span class=&ldquo;cp&rdquo;&gt;&amp;lt;? define ProductTitle=&amp;quot;Business Web Service&amp;quot; ?&amp;gt;&lt;/span&gt;
    &lt;span class=&ldquo;cp&rdquo;&gt;&amp;lt;? define Manufacturer=&amp;quot;Business Name, Inc.&amp;quot; ?&amp;gt;&lt;/span&gt;
    &lt;span class=&ldquo;cp&rdquo;&gt;&amp;lt;? define AppURL=&amp;quot;<a href="http://www.businessname.com&amp;amp;quot">http://www.businessname.com&amp;amp;quot</a>; ?&amp;gt;&lt;/span&gt;
    &lt;span class=&ldquo;cp&rdquo;&gt;&amp;lt;? define Description=&amp;quot;Installer for Business Web Service&amp;quot; ?&amp;gt;&lt;/span&gt;
    &lt;span class=&ldquo;cp&rdquo;&gt;&amp;lt;? define Comments=&amp;quot;Business Web Service Installer&amp;quot; ?&amp;gt;&lt;/span&gt;
    &lt;span class=&ldquo;cp&rdquo;&gt;&amp;lt;? define InstallVersion=&amp;quot;1.0.0.0 ?&amp;gt;&lt;/span&gt;
    &lt;span class=&ldquo;cp&rdquo;&gt;&amp;lt;? define UpgradeCode=&amp;quot;YOUR-GUID-HERE&amp;quot; ?&amp;gt;&lt;/span&gt;
&lt;span class=&ldquo;nt&rdquo;&gt;&amp;lt;/Include&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Next thing we need to do is update our references. We will want to add two references.&lt;/p&gt;</p>

<p>&lt;ol&gt;
&lt;li&gt;The project</p>

<p>&lt;ul&gt;
&lt;li&gt;Change Harvest to False&lt;/li&gt;
&lt;li&gt;Change Project Output Groups to None&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;WiXUIExtension&lt;/li&gt;
&lt;/ol&gt;</p>

<p>&lt;p&gt;Now we need to edit the WiX installer project file. At the top of the project file we need to enable project havesting. To the top of the file in the PropertyGroup element add:&lt;/p&gt;
&lt;div class=&ldquo;highlight&rdquo;&gt;&lt;pre&gt;&lt;code class=&ldquo;xml language-xml&rdquo; data-lang=&ldquo;xml&rdquo;&gt;&lt;span class=&ldquo;cp&rdquo;&gt;&amp;lt;?xml version=&amp;quot; 1.0&amp;quot; encoding=&amp;quot; utf-8&amp;quot;?&amp;gt;&lt;/span&gt;
&lt;span class=&ldquo;nt&rdquo;&gt;&amp;lt;Project&lt;/span&gt; &lt;span class=&ldquo;na&rdquo;&gt;ToolsVersion=&lt;/span&gt;&lt;span class=&ldquo;s&rdquo;&gt;&amp;quot; 4.0&amp;quot;&lt;/span&gt; &lt;span class=&ldquo;na&rdquo;&gt;DefaultTargets=&lt;/span&gt;&lt;span class=&ldquo;s&rdquo;&gt;&amp;quot; Build&amp;quot;&lt;/span&gt; &lt;span class=&ldquo;na&rdquo;&gt;xmlns=&lt;/span&gt;&lt;span class=&ldquo;s&rdquo;&gt;&amp;quot; <a href="http://schemas.microsoft.com/developer/msbuild/2003">http://schemas.microsoft.com/developer/msbuild/2003</a> &amp;quot;&lt;/span&gt;&lt;span class=&ldquo;nt&rdquo;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&ldquo;nt&rdquo;&gt;&amp;lt;PropertyGroup&amp;gt;&lt;/span&gt;
    &lt;span class=&ldquo;nt&rdquo;&gt;&amp;lt; EnableProjectHarvesting&amp;gt;&lt;/span&gt;True &lt;span class=&ldquo;nt&rdquo;&gt;&amp;lt;/EnableProjectHarvesting&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Under the ItemGroup that references your projects solution we need to add a tag to let WiX know that this is a web project. This will be used for conditional statements later on:&lt;/p&gt;
&lt;div class=&ldquo;highlight&rdquo;&gt;&lt;pre&gt;&lt;code class=&ldquo;xml language-xml&rdquo; data-lang=&ldquo;xml&rdquo;&gt;&lt;span class=&ldquo;nt&rdquo;&gt;&amp;lt;ItemGroup&amp;gt;&lt;/span&gt;
    &lt;span class=&ldquo;nt&rdquo;&gt;&amp;lt; ProjectReference&lt;/span&gt; &lt;span class=&ldquo;na&rdquo;&gt;Include =&lt;/span&gt;&lt;span class=&ldquo;s&rdquo;&gt;&amp;quot;..\BusinessWebService\BusinessWebService.csproj &amp;quot;&lt;/span&gt;&lt;span class=&ldquo;nt&rdquo;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&ldquo;nt&rdquo;&gt;&amp;lt; Name&amp;gt;&lt;/span&gt;BusinessWebService &lt;span class=&ldquo;nt&rdquo;&gt;&amp;lt;/Name&amp;gt;&lt;/span&gt;
      &lt;span class=&ldquo;nt&rdquo;&gt;&amp;lt; Project&amp;gt;&lt;/span&gt;{PROJECT-GUID-HERE} &lt;span class=&ldquo;nt&rdquo;&gt;&amp;lt;/Project&amp;gt;&lt;/span&gt;
      &lt;span class=&ldquo;nt&rdquo;&gt;&amp;lt; Private&amp;gt;&lt;/span&gt;True &lt;span class=&ldquo;nt&rdquo;&gt;&amp;lt;/Private&amp;gt;&lt;/span&gt;
      &lt;span class=&ldquo;nt&rdquo;&gt;&amp;lt; DoNotHarvest&amp;gt;&lt;/span&gt;True &lt;span class=&ldquo;nt&rdquo;&gt;&amp;lt;/DoNotHarvest&amp;gt;&lt;/span&gt;
      &lt;span class=&ldquo;nt&rdquo;&gt;&amp;lt; RefProjectOutputGroups&amp;gt;&lt;/span&gt;
      &lt;span class=&ldquo;nt&rdquo;&gt;&amp;lt;/ RefProjectOutputGroups&amp;gt;&lt;/span&gt;
      &lt;span class=&ldquo;nt&rdquo;&gt;&amp;lt; RefTargetDir&amp;gt;&lt;/span&gt;INSTALLFOLDER &lt;span class=&ldquo;nt&rdquo;&gt;&amp;lt;/RefTargetDir&amp;gt;&lt;/span&gt;
      &lt;span class=&ldquo;nt&rdquo;&gt;&amp;lt; WebProject&amp;gt;&lt;/span&gt;True &lt;span class=&ldquo;nt&rdquo;&gt;&amp;lt;/WebProject&amp;gt;&lt;/span&gt;
    &lt;span class=&ldquo;nt&rdquo;&gt;&amp;lt;/ ProjectReference&amp;gt;&lt;/span&gt;
&lt;span class=&ldquo;nt&rdquo;&gt;&amp;lt;/ItemGroup&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Next we need to add a custom target that will get trigger before the build. To do so at the end of the file add:&lt;/p&gt;
&lt;div class=&ldquo;highlight&rdquo;&gt;&lt;pre&gt;&lt;code class=&ldquo;xml language-xml&rdquo; data-lang=&ldquo;xml&rdquo;&gt;      &lt;span class=&ldquo;nt&rdquo;&gt;&amp;lt;Target&lt;/span&gt; &lt;span class=&ldquo;na&rdquo;&gt;Name=&lt;/span&gt;&lt;span class=&ldquo;s&rdquo;&gt;&amp;quot; BeforeBuild&amp;quot;&lt;/span&gt;&lt;span class=&ldquo;nt&rdquo;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&ldquo;nt&rdquo;&gt;&amp;lt;/Target&amp;gt;&lt;/span&gt;
&lt;span class=&ldquo;nt&rdquo;&gt;&amp;lt;/Project&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We need to define four elements in this target. For more detailed information on these elements visit the wix documentation.&lt;/p&gt;</p>

<p>&lt;ul&gt;
&lt;li&gt;MSBuild - Sets up the conditional to look for the WebProject condition that we setup previously&lt;/li&gt;
&lt;li&gt;PropertyGroup - Used to define a constant that points to the PackageDir&lt;/li&gt;
&lt;li&gt;ItemGroup - Used to specify the input paths for the linker&lt;/li&gt;
&lt;li&gt;HeatDirectory - Controls the collection of files needed to be included in this web project. Heat is a time saver as otherwise you would have to specify all of your files manually.&lt;/li&gt;
&lt;/ul&gt;</p>

<p>&lt;p&gt;For my project, I ended up with something that looks like this:&lt;/p&gt;
&lt;div class=&ldquo;highlight&rdquo;&gt;&lt;pre&gt;&lt;code class=&ldquo;xml language-xml&rdquo; data-lang=&ldquo;xml&rdquo;&gt;&lt;span class=&ldquo;nt&rdquo;&gt;&amp;lt;Target&lt;/span&gt; &lt;span class=&ldquo;na&rdquo;&gt;Name=&lt;/span&gt;&lt;span class=&ldquo;s&rdquo;&gt;&amp;quot; BeforeBuild&amp;quot;&lt;/span&gt;&lt;span class=&ldquo;nt&rdquo;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&ldquo;nt&rdquo;&gt;&amp;lt; MSBuild&lt;/span&gt; &lt;span class=&ldquo;na&rdquo;&gt;Projects =&lt;/span&gt;&lt;span class=&ldquo;s&rdquo;&gt;&amp;quot;%(ProjectReference.FullPath) &amp;quot;&lt;/span&gt;
             &lt;span class=&ldquo;na&rdquo;&gt;Targets=&lt;/span&gt;&lt;span class=&ldquo;s&rdquo;&gt;&amp;quot; Package&amp;quot;&lt;/span&gt;
             &lt;span class=&ldquo;na&rdquo;&gt;Properties=&lt;/span&gt;&lt;span class=&ldquo;s&rdquo;&gt;&amp;quot; Configuration=$(Configuration);Platform=AnyCPU &amp;quot;&lt;/span&gt;
             &lt;span class=&ldquo;na&rdquo;&gt;Condition=&lt;/span&gt;&lt;span class=&ldquo;s&rdquo;&gt;&amp;quot; &amp;#39;%(ProjectReference.WebProject)&amp;#39;==&amp;#39;True&amp;#39;&amp;quot;&lt;/span&gt; &lt;span class=&ldquo;nt&rdquo;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&ldquo;nt&rdquo;&gt;&amp;lt; PropertyGroup&amp;gt;&lt;/span&gt;
      &lt;span class=&ldquo;nt&rdquo;&gt;&amp;lt; DefineConstants&lt;/span&gt; &lt;span class=&ldquo;na&rdquo;&gt;Condition =&lt;/span&gt;&lt;span class=&ldquo;s&rdquo;&gt;&amp;quot;&amp;#39;%(ProjectReference.WebProject)&amp;#39;==&amp;#39;True&amp;#39; &amp;quot;&lt;/span&gt;&lt;span class=&ldquo;nt&rdquo;&gt;&amp;gt;&lt;/span&gt;
        %(ProjectReference.Name).PackageDir=%(ProjectReference.RootDir)%(ProjectReference.Directory)obj\$(Configuration)\Package\PackageTmp\
      &lt;span class=&ldquo;nt&rdquo;&gt;&amp;lt;/ DefineConstants&amp;gt;&lt;/span&gt;
    &lt;span class=&ldquo;nt&rdquo;&gt;&amp;lt;/ PropertyGroup&amp;gt;&lt;/span&gt;
    &lt;span class=&ldquo;nt&rdquo;&gt;&amp;lt; ItemGroup&amp;gt;&lt;/span&gt;
      &lt;span class=&ldquo;nt&rdquo;&gt;&amp;lt; LinkerBindInputPaths&lt;/span&gt; &lt;span class=&ldquo;na&rdquo;&gt;Include=&lt;/span&gt;&lt;span class=&ldquo;s&rdquo;&gt;&amp;quot; %(ProjectReference.RootDir)%(ProjectReference.Directory)obj\$(Configuration)\Package\PackageTmp\ &amp;quot;&lt;/span&gt; &lt;span class=&ldquo;nt&rdquo;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&ldquo;nt&rdquo;&gt;&amp;lt;/ ItemGroup&amp;gt;&lt;/span&gt;
    &lt;span class=&ldquo;nt&rdquo;&gt;&amp;lt; HeatDirectory&lt;/span&gt; &lt;span class=&ldquo;na&rdquo;&gt;OutputFile =&lt;/span&gt;&lt;span class=&ldquo;s&rdquo;&gt;&amp;quot;%(ProjectReference.Filename).wxs &amp;quot;&lt;/span&gt;
                   &lt;span class=&ldquo;na&rdquo;&gt;Directory=&lt;/span&gt;&lt;span class=&ldquo;s&rdquo;&gt;&amp;quot; %(ProjectReference.RootDir)%(ProjectReference.Directory)obj\$(Configuration)\Package\PackageTmp\ &amp;quot;&lt;/span&gt;
                   &lt;span class=&ldquo;na&rdquo;&gt;DirectoryRefId=&lt;/span&gt;&lt;span class=&ldquo;s&rdquo;&gt;&amp;quot; INSTALLLOCATION&amp;quot;&lt;/span&gt;
                   &lt;span class=&ldquo;na&rdquo;&gt;ComponentGroupName=&lt;/span&gt;&lt;span class=&ldquo;s&rdquo;&gt;&amp;quot; %(ProjectReference.Filename)_Project&amp;quot;&lt;/span&gt;
                   &lt;span class=&ldquo;na&rdquo;&gt;AutoGenerateGuids=&lt;/span&gt;&lt;span class=&ldquo;s&rdquo;&gt;&amp;quot; false&amp;quot;&lt;/span&gt;
                   &lt;span class=&ldquo;na&rdquo;&gt;GenerateGuidsNow=&lt;/span&gt;&lt;span class=&ldquo;s&rdquo;&gt;&amp;quot; true&amp;quot;&lt;/span&gt;
                   &lt;span class=&ldquo;na&rdquo;&gt;SuppressCom=&lt;/span&gt;&lt;span class=&ldquo;s&rdquo;&gt;&amp;quot; true&amp;quot;&lt;/span&gt;
                   &lt;span class=&ldquo;na&rdquo;&gt;SuppressFragments=&lt;/span&gt;&lt;span class=&ldquo;s&rdquo;&gt;&amp;quot; true&amp;quot;&lt;/span&gt;
                   &lt;span class=&ldquo;na&rdquo;&gt;SuppressRegistry=&lt;/span&gt;&lt;span class=&ldquo;s&rdquo;&gt;&amp;quot; true&amp;quot;&lt;/span&gt;
                   &lt;span class=&ldquo;na&rdquo;&gt;SuppressRootDirectory=&lt;/span&gt;&lt;span class=&ldquo;s&rdquo;&gt;&amp;quot; true&amp;quot;&lt;/span&gt;
                   &lt;span class=&ldquo;na&rdquo;&gt;ToolPath=&lt;/span&gt;&lt;span class=&ldquo;s&rdquo;&gt;&amp;quot; $(WiXToolPath)&amp;quot;&lt;/span&gt;
                   &lt;span class=&ldquo;na&rdquo;&gt;Condition=&lt;/span&gt;&lt;span class=&ldquo;s&rdquo;&gt;&amp;quot; &amp;#39;%(ProjectReference.WebProject)&amp;#39;==&amp;#39;True&amp;#39;&amp;quot;&lt;/span&gt;
                   &lt;span class=&ldquo;na&rdquo;&gt;Transforms=&lt;/span&gt;&lt;span class=&ldquo;s&rdquo;&gt;&amp;quot; %(ProjectReference.Filename).xsl&amp;quot;&lt;/span&gt;
                   &lt;span class=&ldquo;na&rdquo;&gt;PreprocessorVariable=&lt;/span&gt;&lt;span class=&ldquo;s&rdquo;&gt;&amp;quot; var.%(ProjectReference.Name).PackageDir&amp;quot;&lt;/span&gt; &lt;span class=&ldquo;nt&rdquo;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&ldquo;nt&rdquo;&gt;&amp;lt;/Target&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Normally, you would want it to auto generate the GUIDs for you but that option can not be used if your installing to a non-standard directory location. Once the rest of the pieces are in place, we will get a new file in our projects directory that you will need to manually include to your projects source tree once we build it for the first time.&lt;/p&gt;</p>

<p>&lt;p&gt;Next I need to add an XSL file to our project that will control the omitting of certain files that I don&amp;rsquo;t want to include in the file installer. For this project, since the client doesn&amp;rsquo;t want to push out xml or config files. I will omit them from the installer using an Xsl Stylesheet defined in the Transorms property earlier in the Target element of the project file.&lt;/p&gt;</p>

<p>&lt;p&gt;&lt;img src=&ldquo;<a href="http://farm3.staticflickr.com/2840/9472180923_756dc0b1a7.jpg">http://farm3.staticflickr.com/2840/9472180923_756dc0b1a7.jpg</a>&rdquo; alt=&ldquo;Add New Item&rdquo;&gt;&lt;/p&gt;</p>

<p>&lt;p&gt;This file will look like:&lt;/p&gt;
&lt;div class=&ldquo;highlight&rdquo;&gt;&lt;pre&gt;&lt;code class=&ldquo;xml language-xml&rdquo; data-lang=&ldquo;xml&rdquo;&gt;&lt;span class=&ldquo;cp&rdquo;&gt;&amp;lt;?xml version=&amp;quot; 1.0&amp;quot; encoding=&amp;quot; utf-8&amp;quot;?&amp;gt;&lt;/span&gt;</p>

<p>&lt;span class=&ldquo;nt&rdquo;&gt;&amp;lt;xsl:stylesheet&lt;/span&gt; &lt;span class=&ldquo;na&rdquo;&gt;version=&lt;/span&gt;&lt;span class=&ldquo;s&rdquo;&gt;&amp;quot; 1.0&amp;quot;&lt;/span&gt; &lt;span class=&ldquo;na&rdquo;&gt;xmlns:xsl=&lt;/span&gt;&lt;span class=&ldquo;s&rdquo;&gt;&amp;quot; <a href="http://www.w3.org/1999/XSL/Transform&amp;amp;quot;&amp;lt;/span">http://www.w3.org/1999/XSL/Transform&amp;amp;quot;&amp;lt;/span</a>&gt;
                &lt;span class=&ldquo;na&rdquo;&gt;xmlns:wix=&lt;/span&gt;&lt;span class=&ldquo;s&rdquo;&gt;&amp;quot; <a href="http://schemas.microsoft.com/wix/2006/wi&amp;amp;quot;&amp;lt;/span">http://schemas.microsoft.com/wix/2006/wi&amp;amp;quot;&amp;lt;/span</a>&gt;
                &lt;span class=&ldquo;na&rdquo;&gt;xmlns:msxsl=&lt;/span&gt;&lt;span class=&ldquo;s&rdquo;&gt;&amp;quot; urn:schemas-microsoft-com:xslt&amp;quot;&lt;/span&gt; &lt;span class=&ldquo;na&rdquo;&gt;exclude-result-prefixes=&lt;/span&gt;&lt;span class=&ldquo;s&rdquo;&gt;&amp;quot; msxsl&amp;quot;&lt;/span&gt;&lt;span class=&ldquo;nt&rdquo;&gt;&amp;gt;&lt;/span&gt;</p>

<p>&lt;span class=&ldquo;nt&rdquo;&gt;&amp;lt;xsl:output&lt;/span&gt; &lt;span class=&ldquo;na&rdquo;&gt;method=&lt;/span&gt;&lt;span class=&ldquo;s&rdquo;&gt;&amp;quot; xml&amp;quot;&lt;/span&gt; &lt;span class=&ldquo;na&rdquo;&gt;indent=&lt;/span&gt;&lt;span class=&ldquo;s&rdquo;&gt;&amp;quot; yes&amp;quot;&lt;/span&gt; &lt;span class=&ldquo;nt&rdquo;&gt;/&amp;gt;&lt;/span&gt;</p>

<p>&lt;span class=&ldquo;c&rdquo;&gt;&amp;lt;!&ndash;Identity Transform&ndash;&amp;gt;&lt;/span&gt;
  &lt;span class=&ldquo;nt&rdquo;&gt;&amp;lt;xsl:template&lt;/span&gt; &lt;span class=&ldquo;na&rdquo;&gt;match=&lt;/span&gt;&lt;span class=&ldquo;s&rdquo;&gt;&amp;quot; @*|node()&amp;quot;&lt;/span&gt;&lt;span class=&ldquo;nt&rdquo;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&ldquo;nt&rdquo;&gt;&amp;lt; xsl:copy&amp;gt;&lt;/span&gt;
      &lt;span class=&ldquo;nt&rdquo;&gt;&amp;lt; xsl:apply-templates&lt;/span&gt; &lt;span class=&ldquo;na&rdquo;&gt;select =&lt;/span&gt;&lt;span class=&ldquo;s&rdquo;&gt;&amp;quot;@*|node() &amp;quot;&lt;/span&gt; &lt;span class=&ldquo;nt&rdquo;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&ldquo;nt&rdquo;&gt;&amp;lt;/ xsl:copy&amp;gt;&lt;/span&gt;
  &lt;span class=&ldquo;nt&rdquo;&gt;&amp;lt;/xsl:template&amp;gt;&lt;/span&gt;</p>

<p>&lt;span class=&ldquo;c&rdquo;&gt;&amp;lt;!&ndash;Set up keys for ignoring various file types&ndash;&amp;gt;&lt;/span&gt;
  &lt;span class=&ldquo;nt&rdquo;&gt;&amp;lt;xsl:key&lt;/span&gt; &lt;span class=&ldquo;na&rdquo;&gt;name=&lt;/span&gt;&lt;span class=&ldquo;s&rdquo;&gt;&amp;quot; config-search&amp;quot;&lt;/span&gt;
           &lt;span class=&ldquo;na&rdquo;&gt;match=&lt;/span&gt;&lt;span class=&ldquo;s&rdquo;&gt;&amp;quot; wix:Component[contains(wix:File/@Source, &amp;#39;.config&amp;#39;) and not(contains(wix:File/@Source, &amp;#39;.production&amp;#39;))]&amp;quot;&lt;/span&gt;
           &lt;span class=&ldquo;na&rdquo;&gt;use=&lt;/span&gt;&lt;span class=&ldquo;s&rdquo;&gt;&amp;quot; @Id&amp;quot;&lt;/span&gt; &lt;span class=&ldquo;nt&rdquo;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&ldquo;nt&rdquo;&gt;&amp;lt;xsl:key&lt;/span&gt; &lt;span class=&ldquo;na&rdquo;&gt;name=&lt;/span&gt;&lt;span class=&ldquo;s&rdquo;&gt;&amp;quot; wixlib-search&amp;quot;&lt;/span&gt; &lt;span class=&ldquo;na&rdquo;&gt;match=&lt;/span&gt;&lt;span class=&ldquo;s&rdquo;&gt;&amp;quot; wix:Component[contains(wix:File/@Source, &amp;#39;.wixlib&amp;#39;)]&amp;quot;&lt;/span&gt; &lt;span class=&ldquo;na&rdquo;&gt;use =&lt;/span&gt;&lt;span class=&ldquo;s&rdquo;&gt;&amp;quot;@Id &amp;quot;&lt;/span&gt; &lt;span class=&ldquo;nt&rdquo;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&ldquo;nt&rdquo;&gt;&amp;lt;xsl:key&lt;/span&gt; &lt;span class=&ldquo;na&rdquo;&gt;name=&lt;/span&gt;&lt;span class=&ldquo;s&rdquo;&gt;&amp;quot; svn-search&amp;quot;&lt;/span&gt; &lt;span class=&ldquo;na&rdquo;&gt;match=&lt;/span&gt;&lt;span class=&ldquo;s&rdquo;&gt;&amp;quot; wix:Component[ancestor::wix:Directory/@Name = &amp;#39;.svn&amp;#39;]&amp;quot;&lt;/span&gt; &lt;span class=&ldquo;na&rdquo;&gt;use =&lt;/span&gt;&lt;span class=&ldquo;s&rdquo;&gt;&amp;quot;@Id &amp;quot;&lt;/span&gt; &lt;span class=&ldquo;nt&rdquo;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&ldquo;nt&rdquo;&gt;&amp;lt;xsl:key&lt;/span&gt; &lt;span class=&ldquo;na&rdquo;&gt;name=&lt;/span&gt;&lt;span class=&ldquo;s&rdquo;&gt;&amp;quot; xml-search&amp;quot;&lt;/span&gt; &lt;span class=&ldquo;na&rdquo;&gt;match=&lt;/span&gt;&lt;span class=&ldquo;s&rdquo;&gt;&amp;quot; wix:Component[contains(wix:File/@Source, &amp;#39;.xml&amp;#39;)]&amp;quot;&lt;/span&gt; &lt;span class=&ldquo;na&rdquo;&gt;use =&lt;/span&gt;&lt;span class=&ldquo;s&rdquo;&gt;&amp;quot;@Id &amp;quot;&lt;/span&gt; &lt;span class=&ldquo;nt&rdquo;&gt;/&amp;gt;&lt;/span&gt;</p>

<p>&lt;span class=&ldquo;c&rdquo;&gt;&amp;lt;!&ndash;Match and ignore .config files&ndash;&amp;gt;&lt;/span&gt;
  &lt;span class=&ldquo;nt&rdquo;&gt;&amp;lt;xsl:template&lt;/span&gt; &lt;span class=&ldquo;na&rdquo;&gt;match=&lt;/span&gt;&lt;span class=&ldquo;s&rdquo;&gt;&amp;quot; wix:Component[key(&amp;#39;config-search&amp;#39;, @Id)]&amp;quot;&lt;/span&gt; &lt;span class=&ldquo;nt&rdquo;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&ldquo;nt&rdquo;&gt;&amp;lt;xsl:template&lt;/span&gt; &lt;span class=&ldquo;na&rdquo;&gt;match=&lt;/span&gt;&lt;span class=&ldquo;s&rdquo;&gt;&amp;quot; wix:ComponentRef[key(&amp;#39;config-search&amp;#39;, @Id)] &amp;quot;&lt;/span&gt; &lt;span class=&ldquo;nt&rdquo;&gt;/&amp;gt;&lt;/span&gt;</p>

<p>&lt;span class=&ldquo;c&rdquo;&gt;&amp;lt;!&ndash;Match and ignore leftover .wixlib files on developer machines &ndash;&amp;gt;&lt;/span&gt;
  &lt;span class=&ldquo;nt&rdquo;&gt;&amp;lt;xsl:template&lt;/span&gt; &lt;span class=&ldquo;na&rdquo;&gt;match=&lt;/span&gt;&lt;span class=&ldquo;s&rdquo;&gt;&amp;quot; wix:Component[key(&amp;#39;wixlib-search&amp;#39;, @Id)]&amp;quot;&lt;/span&gt; &lt;span class=&ldquo;nt&rdquo;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&ldquo;nt&rdquo;&gt;&amp;lt;xsl:template&lt;/span&gt; &lt;span class=&ldquo;na&rdquo;&gt;match=&lt;/span&gt;&lt;span class=&ldquo;s&rdquo;&gt;&amp;quot; wix:ComponentRef[key(&amp;#39;wixlib-search&amp;#39;, @Id)] &amp;quot;&lt;/span&gt; &lt;span class=&ldquo;nt&rdquo;&gt;/&amp;gt;&lt;/span&gt;</p>

<p>&lt;span class=&ldquo;c&rdquo;&gt;&amp;lt;!&ndash;Match and ignore “.svn&amp;quot; directories on build machines &ndash;&amp;gt;&lt;/span&gt;
  &lt;span class=&ldquo;nt&rdquo;&gt;&amp;lt;xsl:template&lt;/span&gt; &lt;span class=&ldquo;na&rdquo;&gt;match=&lt;/span&gt;&lt;span class=&ldquo;s&rdquo;&gt;&amp;quot; wix:Directory[@Name = &amp;#39;.svn&amp;#39;]&amp;quot;&lt;/span&gt; &lt;span class=&ldquo;nt&rdquo;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&ldquo;nt&rdquo;&gt;&amp;lt;xsl:template&lt;/span&gt; &lt;span class=&ldquo;na&rdquo;&gt;match=&lt;/span&gt;&lt;span class=&ldquo;s&rdquo;&gt;&amp;quot; wix:ComponentRef[key(&amp;#39;svn-search&amp;#39;, @Id)]&amp;quot;&lt;/span&gt; &lt;span class=&ldquo;nt&rdquo;&gt;/&amp;gt;&lt;/span&gt;</p>

<p>&lt;span class=&ldquo;c&rdquo;&gt;&amp;lt;!&ndash;Match and ignore leftover .xml files on developer machines &ndash;&amp;gt;&lt;/span&gt;
  &lt;span class=&ldquo;nt&rdquo;&gt;&amp;lt;xsl:template&lt;/span&gt; &lt;span class=&ldquo;na&rdquo;&gt;match=&lt;/span&gt;&lt;span class=&ldquo;s&rdquo;&gt;&amp;quot; wix:Component[key(&amp;#39;xml-search&amp;#39;, @Id)]&amp;quot;&lt;/span&gt; &lt;span class=&ldquo;nt&rdquo;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&ldquo;nt&rdquo;&gt;&amp;lt;xsl:template&lt;/span&gt; &lt;span class=&ldquo;na&rdquo;&gt;match=&lt;/span&gt;&lt;span class=&ldquo;s&rdquo;&gt;&amp;quot; wix:ComponentRef[key(&amp;#39;xml-search&amp;#39;, @Id)]&amp;quot;&lt;/span&gt; &lt;span class=&ldquo;nt&rdquo;&gt;/&amp;gt;&lt;/span&gt;</p>

<p>&lt;span class=&ldquo;nt&rdquo;&gt;&amp;lt;/xsl:stylesheet&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now we can move to our final file which should be named Product.wxs. This file is the key to controlling all aspects of the installer. The first thing we need to include is our include file. We will do so using the &amp;lt;?include ?&amp;gt; directive.&lt;/p&gt;
&lt;div class=&ldquo;highlight&rdquo;&gt;&lt;pre&gt;&lt;code class=&ldquo;xml language-xml&rdquo; data-lang=&ldquo;xml&rdquo;&gt;&lt;span class=&ldquo;cp&rdquo;&gt;&amp;lt;?xml version=&amp;quot; 1.0&amp;quot; encoding=&amp;quot; UTF-8&amp;quot;?&amp;gt;&lt;/span&gt;
&lt;span class=&ldquo;nt&rdquo;&gt;&amp;lt;WiX&lt;/span&gt; &lt;span class=&ldquo;na&rdquo;&gt;xmlns=&lt;/span&gt;&lt;span class=&ldquo;s&rdquo;&gt;&amp;quot; <a href="http://schemas.microsoft.com/wix/2006/wi&amp;amp;quot;&amp;lt;/span&amp;gt;&amp;lt;span">http://schemas.microsoft.com/wix/2006/wi&amp;amp;quot;&amp;lt;/span&amp;gt;&amp;lt;span</a> class=&ldquo;nt&rdquo;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&ldquo;cp&rdquo;&gt;&amp;lt;?include Configuration.wxi ?&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With our configuration file included, we will now have access to all of the variables that we defined earlier in the form of $(var.VariableName). Let&amp;rsquo;s configure the Product element next.&lt;/p&gt;
&lt;div class=&ldquo;highlight&rdquo;&gt;&lt;pre&gt;&lt;code class=&ldquo;xml language-xml&rdquo; data-lang=&ldquo;xml&rdquo;&gt;&lt;span class=&ldquo;nt&rdquo;&gt;&amp;lt;Product&lt;/span&gt; &lt;span class=&ldquo;na&rdquo;&gt;Id=&lt;/span&gt;&lt;span class=&ldquo;s&rdquo;&gt;&amp;quot; *&amp;quot;&lt;/span&gt;
           &lt;span class=&ldquo;na&rdquo;&gt;Name=&lt;/span&gt;&lt;span class=&ldquo;s&rdquo;&gt;&amp;quot; $(var.ProductName)&amp;quot;&lt;/span&gt;
           &lt;span class=&ldquo;na&rdquo;&gt;Language=&lt;/span&gt;&lt;span class=&ldquo;s&rdquo;&gt;&amp;quot; 1033&amp;quot;&lt;/span&gt;
           &lt;span class=&ldquo;na&rdquo;&gt;Version=&lt;/span&gt;&lt;span class=&ldquo;s&rdquo;&gt;&amp;quot; $(var.InstallVersion)&amp;quot;&lt;/span&gt;
           &lt;span class=&ldquo;na&rdquo;&gt;Manufacturer=&lt;/span&gt;&lt;span class=&ldquo;s&rdquo;&gt;&amp;quot; $(var.Manufacturer)&amp;quot;&lt;/span&gt;
           &lt;span class=&ldquo;na&rdquo;&gt;UpgradeCode=&lt;/span&gt;&lt;span class=&ldquo;s&rdquo;&gt;&amp;quot; $(var.UpgradeCode)&amp;quot;&lt;/span&gt;&lt;span class=&ldquo;nt&rdquo;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Next we will move onto the Package element:&lt;/p&gt;
&lt;div class=&ldquo;highlight&rdquo;&gt;&lt;pre&gt;&lt;code class=&ldquo;xml language-xml&rdquo; data-lang=&ldquo;xml&rdquo;&gt;&lt;span class=&ldquo;nt&rdquo;&gt;&amp;lt;Package&lt;/span&gt; &lt;span class=&ldquo;na&rdquo;&gt;Id=&lt;/span&gt;&lt;span class=&ldquo;s&rdquo;&gt;&amp;quot; *&amp;quot;&lt;/span&gt;
             &lt;span class=&ldquo;na&rdquo;&gt;Description=&lt;/span&gt;&lt;span class=&ldquo;s&rdquo;&gt;&amp;quot; $(var.Description)&amp;quot;&lt;/span&gt;
             &lt;span class=&ldquo;na&rdquo;&gt;Comments=&lt;/span&gt;&lt;span class=&ldquo;s&rdquo;&gt;&amp;quot; $(var.Comments)&amp;quot;&lt;/span&gt;
             &lt;span class=&ldquo;na&rdquo;&gt;Manufacturer=&lt;/span&gt;&lt;span class=&ldquo;s&rdquo;&gt;&amp;quot; $(var.Manufacturer)&amp;quot;&lt;/span&gt;
             &lt;span class=&ldquo;na&rdquo;&gt;InstallerVersion=&lt;/span&gt;&lt;span class=&ldquo;s&rdquo;&gt;&amp;quot; 200&amp;quot;&lt;/span&gt;
             &lt;span class=&ldquo;na&rdquo;&gt;Languages=&lt;/span&gt;&lt;span class=&ldquo;s&rdquo;&gt;&amp;quot; 1033&amp;quot;&lt;/span&gt;
             &lt;span class=&ldquo;na&rdquo;&gt;Compressed=&lt;/span&gt;&lt;span class=&ldquo;s&rdquo;&gt;&amp;quot; yes&amp;quot;&lt;/span&gt;
             &lt;span class=&ldquo;na&rdquo;&gt;SummaryCodepage=&lt;/span&gt;&lt;span class=&ldquo;s&rdquo;&gt;&amp;quot; 1252&amp;quot;&lt;/span&gt; &lt;span class=&ldquo;nt&rdquo;&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;From there we can go on to configure our Feature element:&lt;/p&gt;
&lt;div class=&ldquo;highlight&rdquo;&gt;&lt;pre&gt;&lt;code class=&ldquo;xml language-xml&rdquo; data-lang=&ldquo;xml&rdquo;&gt;&lt;span class=&ldquo;nt&rdquo;&gt;&amp;lt;Feature&lt;/span&gt; &lt;span class=&ldquo;na&rdquo;&gt;Id=&lt;/span&gt;&lt;span class=&ldquo;s&rdquo;&gt;&amp;quot; ProductFeature&amp;quot;&lt;/span&gt; &lt;span class=&ldquo;na&rdquo;&gt;Title=&lt;/span&gt;&lt;span class=&ldquo;s&rdquo;&gt;&amp;quot; $(var.ProductTitle)&amp;quot;&lt;/span&gt; &lt;span class=&ldquo;na&rdquo;&gt;Level=&lt;/span&gt;&lt;span class=&ldquo;s&rdquo;&gt;&amp;quot; 1&amp;quot;&lt;/span&gt;&lt;span class=&ldquo;nt&rdquo;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&ldquo;nt&rdquo;&gt;&amp;lt; ComponentGroupRef&lt;/span&gt; &lt;span class=&ldquo;na&rdquo;&gt;Id =&lt;/span&gt;&lt;span class=&ldquo;s&rdquo;&gt;&amp;quot;BusinessWebService_Project &amp;quot;&lt;/span&gt; &lt;span class=&ldquo;nt&rdquo;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class=&ldquo;nt&rdquo;&gt;&amp;lt; ComponentGroupRef&lt;/span&gt; &lt;span class=&ldquo;na&rdquo;&gt;Id =&lt;/span&gt;&lt;span class=&ldquo;s&rdquo;&gt;&amp;quot;Product.Generated &amp;quot;&lt;/span&gt; &lt;span class=&ldquo;nt&rdquo;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&ldquo;nt&rdquo;&gt;&amp;lt;/ Feature&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The default Product file comes with a Fragment whose Id is called ProductComponents. We can remove that since we will be using Heat to create that fragment. Otherwise we would have to specify each of our files in that fragment manually.&lt;/p&gt;</p>

<p>&lt;p&gt;Now we need to configure the InstallLocation to point to where we want to program to be installed initially.&lt;/p&gt;
&lt;div class=&ldquo;highlight&rdquo;&gt;&lt;pre&gt;&lt;code class=&ldquo;xml language-xml&rdquo; data-lang=&ldquo;xml&rdquo;&gt;&lt;span class=&ldquo;nt&rdquo;&gt;&amp;lt; Directory&lt;/span&gt; &lt;span class=&ldquo;na&rdquo;&gt;Id =&lt;/span&gt;&lt;span class=&ldquo;s&rdquo;&gt;&amp;quot; TARGETDIR &amp;quot;&lt;/span&gt; &lt;span class=&ldquo;na&rdquo;&gt;Name =&lt;/span&gt;&lt;span class=&ldquo;s&rdquo;&gt;&amp;quot; SourceDir &amp;quot;&lt;/span&gt;&lt;span class=&ldquo;nt&rdquo;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&ldquo;nt&rdquo;&gt;&amp;lt; Directory&lt;/span&gt; &lt;span class=&ldquo;na&rdquo;&gt;Id =&lt;/span&gt; &lt;span class=&ldquo;s&rdquo;&gt;&amp;quot;PROGRAMFILES &amp;quot;&lt;/span&gt; &lt;span class=&ldquo;na&rdquo;&gt;Name =&lt;/span&gt; &lt;span class=&ldquo;s&rdquo;&gt;&amp;quot;Program Files &amp;quot;&lt;/span&gt; &lt;span class=&ldquo;nt&rdquo;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&ldquo;nt&rdquo;&gt;&amp;lt; Directory&lt;/span&gt; &lt;span class=&ldquo;na&rdquo;&gt;Id =&lt;/span&gt; &lt;span class=&ldquo;s&rdquo;&gt;&amp;quot;INSTALLLOCATION &amp;quot;&lt;/span&gt; &lt;span class=&ldquo;na&rdquo;&gt;Name =&lt;/span&gt; &lt;span class=&ldquo;s&rdquo;&gt;&amp;quot;BusinessWebService &amp;quot;&lt;/span&gt; &lt;span class=&ldquo;nt&rdquo;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class=&ldquo;nt&rdquo;&gt;&amp;lt;/ Directory &amp;gt;&lt;/span&gt;
&lt;span class=&ldquo;nt&rdquo;&gt;&amp;lt;/ Directory &amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We also need to declare a property that will tell WiX where the installlocation is:&lt;/p&gt;
&lt;div class=&ldquo;highlight&rdquo;&gt;&lt;pre&gt;&lt;code class=&ldquo;xml language-xml&rdquo; data-lang=&ldquo;xml&rdquo;&gt;&lt;span class=&ldquo;nt&rdquo;&gt;&amp;lt;Property&lt;/span&gt; &lt;span class=&ldquo;na&rdquo;&gt;Id=&lt;/span&gt;&lt;span class=&ldquo;s&rdquo;&gt;&amp;quot; WIXUI_INSTALLDIR&amp;quot;&lt;/span&gt; &lt;span class=&ldquo;na&rdquo;&gt;Value=&lt;/span&gt;&lt;span class=&ldquo;s&rdquo;&gt;&amp;quot; INSTALLLOCATION&amp;quot;&lt;/span&gt; &lt;span class=&ldquo;nt&rdquo;&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After that you should be ready to build your installer. Upon a successful build you will need to include the file that was generated in the project&amp;rsquo;s folder. You will end up with a structure like:&lt;/p&gt;</p>

<p>&lt;p&gt;&lt;img src=&ldquo;<a href="http://farm4.staticflickr.com/3825/9474968650_c528df53ff_s.jpg">http://farm4.staticflickr.com/3825/9474968650_c528df53ff_s.jpg</a>&rdquo; alt=&ldquo;Add New Item&rdquo;&gt;&lt;/p&gt;</p>

<p>&lt;p&gt;Until next time&amp;hellip;&lt;/p&gt;</p>

<p>&lt;h3&gt;References:&lt;/h3&gt;</p>

<p>&lt;ul&gt;
&lt;li&gt;C Surfleet. (2011, June 30). Simplify Deployment with Visual Studio and WiX [Web log post]. Retrieved from &lt;a href=&ldquo;<a href="http://www.chrissurfleet.co.uk/post/simplify-deployment-with-visual-studio-and-wix.aspx&amp;quot;&amp;gt;http://www.chrissurfleet.co.uk/post/simplify-deployment-with-visual-studio-and-wix.aspx&amp;lt;/a&amp;gt;&amp;lt;/li">http://www.chrissurfleet.co.uk/post/simplify-deployment-with-visual-studio-and-wix.aspx&amp;quot;&amp;gt;http://www.chrissurfleet.co.uk/post/simplify-deployment-with-visual-studio-and-wix.aspx&amp;lt;/a&amp;gt;&amp;lt;/li</a>&gt;
&lt;/ul&gt;</p>

]]></content>
 </entry>
 
 <entry>
   <id>http://utopianconcept.com//posts/creating-a-mock-web-service-in-.net</id>
   <link type="text/html" rel="alternate" href="http://utopianconcept.com/posts/creating-a-mock-web-service-in-.net"/>
   <title>Creating a Mock Web Service in .NET</title>
   <published>2013-08-08T00:00:00-04:00</published>
   <updated>2013-08-08T00:00:00-04:00</updated>
   <summary type="html">&lt;p&gt;Earlier this week at a client&amp;rsquo;s I had to trace down where an exception was coming from when making a web service call. I had access to the client&amp;rsquo;s front end code, the part that actually made the calls to the web service in question but didn&amp;rsquo;t have access to the code for the web service. In order to replicate this, I figured the best route would be to create a mock web service that I could than throw exceptions or custom return values that I would like to test.&lt;/p&gt;

&lt;p&gt;Creating a mock web service has numerous benefits in terms of testing. Some of those might include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;By passing a web service that charges you for every service call.&lt;/li&gt;
&lt;li&gt;Serve up different scenarios for &amp;ldquo;expected&amp;rdquo; results.&lt;/li&gt;
&lt;li&gt;Simulate the web service being down or not available.&lt;/li&gt;
&lt;li&gt;The service is still being developed and you need to continue on with your development.&lt;/li&gt;
&lt;li&gt;Test exceptions that might be thrown from the web service.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With the later bullet point being my case, I start off by grabbing the &lt;a href=&quot;http://en.wikipedia.org/wiki/Web_Services_Description_Language&quot;&gt;WSDL&lt;/a&gt; file from the existing running web service. To do this you can just append ?wsdl to the path and it will generate the WSDL XML for you. Save this out to your local machine.&lt;/p&gt;

&lt;p&gt;After acquiring the WSDL XML, we will use the &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/7h3ystb6.aspx&quot;&gt;wsdl.exe&lt;/a&gt; file provided by Visual Studio to create our service interface. Open up the &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/ms229859.aspx&quot;&gt;Visual Studio Command Prompt&lt;/a&gt;, and type:
&lt;code&gt;
wsdl /language:CS /namespace:Your.Namespace /out:Output\Directory /protocol:SOAP /serverinterface yourwsdlxmlfile.wsdl
&lt;/code&gt;
This should create a .cs file in the /out directory that will contain the interface that you need to implement to create a mock web service.&lt;/p&gt;

&lt;p&gt;In Visual Studio, create a new ASP.NET Empty Web Application from the Web installed templates under Add New Project. Add the .cs file to that was generated to this project, and then add a new web service.&lt;/p&gt;

&lt;p&gt;In the code behind of this web service, change the class to implement the interface name of the .cs file that you just added to the project. Once that is done, tell Visual Studio to implement the interface which will give you stubs for the web service methods. Add the [WebMethod] attribute to each of the method calls to make them accessible via the web service. From here you can either leave the default throw in place or add your own custom code that you want your mock service to implement.&lt;/p&gt;

&lt;p&gt;If you run the application you should be able to navigate to your mock web service. If that is successful, then you can go to your existing client code and add a web service to the generated URL that points to the newly created mock web service.&lt;/p&gt;

&lt;p&gt;Have fun testing your web service! Just don&amp;rsquo;t forget to point the web reference back to the original web service instead of your mock service before deploying.&lt;/p&gt;

&lt;p&gt;Until next time&amp;hellip;&lt;/p&gt;
</summary>
   <content type="html">&lt;p&gt;Earlier this week at a client&amp;rsquo;s I had to trace down where an exception was coming from when making a web service call. I had access to the client&amp;rsquo;s front end code, the part that actually made the calls to the web service in question but didn&amp;rsquo;t have access to the code for the web service. In order to replicate this, I figured the best route would be to create a mock web service that I could than throw exceptions or custom return values that I would like to test.&lt;/p&gt;

&lt;p&gt;Creating a mock web service has numerous benefits in terms of testing. Some of those might include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;By passing a web service that charges you for every service call.&lt;/li&gt;
&lt;li&gt;Serve up different scenarios for &amp;ldquo;expected&amp;rdquo; results.&lt;/li&gt;
&lt;li&gt;Simulate the web service being down or not available.&lt;/li&gt;
&lt;li&gt;The service is still being developed and you need to continue on with your development.&lt;/li&gt;
&lt;li&gt;Test exceptions that might be thrown from the web service.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With the later bullet point being my case, I start off by grabbing the &lt;a href=&quot;http://en.wikipedia.org/wiki/Web_Services_Description_Language&quot;&gt;WSDL&lt;/a&gt; file from the existing running web service. To do this you can just append ?wsdl to the path and it will generate the WSDL XML for you. Save this out to your local machine.&lt;/p&gt;

&lt;p&gt;After acquiring the WSDL XML, we will use the &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/7h3ystb6.aspx&quot;&gt;wsdl.exe&lt;/a&gt; file provided by Visual Studio to create our service interface. Open up the &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/ms229859.aspx&quot;&gt;Visual Studio Command Prompt&lt;/a&gt;, and type:
&lt;code&gt;
wsdl /language:CS /namespace:Your.Namespace /out:Output\Directory /protocol:SOAP /serverinterface yourwsdlxmlfile.wsdl
&lt;/code&gt;
This should create a .cs file in the /out directory that will contain the interface that you need to implement to create a mock web service.&lt;/p&gt;

&lt;p&gt;In Visual Studio, create a new ASP.NET Empty Web Application from the Web installed templates under Add New Project. Add the .cs file to that was generated to this project, and then add a new web service.&lt;/p&gt;

&lt;p&gt;In the code behind of this web service, change the class to implement the interface name of the .cs file that you just added to the project. Once that is done, tell Visual Studio to implement the interface which will give you stubs for the web service methods. Add the [WebMethod] attribute to each of the method calls to make them accessible via the web service. From here you can either leave the default throw in place or add your own custom code that you want your mock service to implement.&lt;/p&gt;

&lt;p&gt;If you run the application you should be able to navigate to your mock web service. If that is successful, then you can go to your existing client code and add a web service to the generated URL that points to the newly created mock web service.&lt;/p&gt;

&lt;p&gt;Have fun testing your web service! Just don&amp;rsquo;t forget to point the web reference back to the original web service instead of your mock service before deploying.&lt;/p&gt;

&lt;p&gt;Until next time&amp;hellip;&lt;/p&gt;
</content>
   <author>
     <name>Ray Clanan</name>
     <uri>http://utopianconcept.com</uri>
   </author>
   <content type="html"><![CDATA[
<p>&lt;p&gt;Earlier this week at a client&amp;rsquo;s I had to trace down where an exception was coming from when making a web service call. I had access to the client&amp;rsquo;s front end code, the part that actually made the calls to the web service in question but didn&amp;rsquo;t have access to the code for the web service. In order to replicate this, I figured the best route would be to create a mock web service that I could than throw exceptions or custom return values that I would like to test.&lt;/p&gt;</p>

<p>&lt;p&gt;Creating a mock web service has numerous benefits in terms of testing. Some of those might include:&lt;/p&gt;</p>

<p>&lt;ul&gt;
&lt;li&gt;By passing a web service that charges you for every service call.&lt;/li&gt;
&lt;li&gt;Serve up different scenarios for &amp;ldquo;expected&amp;rdquo; results.&lt;/li&gt;
&lt;li&gt;Simulate the web service being down or not available.&lt;/li&gt;
&lt;li&gt;The service is still being developed and you need to continue on with your development.&lt;/li&gt;
&lt;li&gt;Test exceptions that might be thrown from the web service.&lt;/li&gt;
&lt;/ul&gt;</p>

<p>&lt;p&gt;With the later bullet point being my case, I start off by grabbing the &lt;a href=&ldquo;<a href="http://en.wikipedia.org/wiki/Web_Services_Description_Language&amp;quot;&amp;gt;WSDL&amp;lt;/a">http://en.wikipedia.org/wiki/Web_Services_Description_Language&amp;quot;&amp;gt;WSDL&amp;lt;/a</a>&gt; file from the existing running web service. To do this you can just append ?wsdl to the path and it will generate the WSDL XML for you. Save this out to your local machine.&lt;/p&gt;</p>

<p>&lt;p&gt;After acquiring the WSDL XML, we will use the &lt;a href=&rdquo;<a href="http://msdn.microsoft.com/en-us/library/7h3ystb6.aspx&amp;quot;&amp;gt;wsdl.exe&amp;lt;/a">http://msdn.microsoft.com/en-us/library/7h3ystb6.aspx&amp;quot;&amp;gt;wsdl.exe&amp;lt;/a</a>&gt; file provided by Visual Studio to create our service interface. Open up the &lt;a href=&ldquo;<a href="http://msdn.microsoft.com/en-us/library/ms229859.aspx&amp;quot;&amp;gt;Visual">http://msdn.microsoft.com/en-us/library/ms229859.aspx&amp;quot;&amp;gt;Visual</a> Studio Command Prompt&lt;/a&gt;, and type:
&lt;code&gt;
wsdl /language:CS /namespace:Your.Namespace /out:Output\Directory /protocol:SOAP /serverinterface yourwsdlxmlfile.wsdl
&lt;/code&gt;
This should create a .cs file in the /out directory that will contain the interface that you need to implement to create a mock web service.&lt;/p&gt;</p>

<p>&lt;p&gt;In Visual Studio, create a new ASP.NET Empty Web Application from the Web installed templates under Add New Project. Add the .cs file to that was generated to this project, and then add a new web service.&lt;/p&gt;</p>

<p>&lt;p&gt;In the code behind of this web service, change the class to implement the interface name of the .cs file that you just added to the project. Once that is done, tell Visual Studio to implement the interface which will give you stubs for the web service methods. Add the [WebMethod] attribute to each of the method calls to make them accessible via the web service. From here you can either leave the default throw in place or add your own custom code that you want your mock service to implement.&lt;/p&gt;</p>

<p>&lt;p&gt;If you run the application you should be able to navigate to your mock web service. If that is successful, then you can go to your existing client code and add a web service to the generated URL that points to the newly created mock web service.&lt;/p&gt;</p>

<p>&lt;p&gt;Have fun testing your web service! Just don&amp;rsquo;t forget to point the web reference back to the original web service instead of your mock service before deploying.&lt;/p&gt;</p>

<p>&lt;p&gt;Until next time&amp;hellip;&lt;/p&gt;</p>

]]></content>
 </entry>
 
 <entry>
   <id>http://utopianconcept.com//posts/hello-world</id>
   <link type="text/html" rel="alternate" href="http://utopianconcept.com/posts/hello-world"/>
   <title>Obligatory Hello World</title>
   <published>2013-08-07T00:00:00-04:00</published>
   <updated>2013-08-07T00:00:00-04:00</updated>
   <summary type="html">&lt;p&gt;This is  my obligatory hello world post! &lt;/p&gt;

&lt;p&gt;I am starting this blog that will mostly deal with my development experiences and interest. My hopes through out all of this is to increase my online presence in the development community, give back to others as so many before me have done, make new connections, and to never stop learning.&lt;/p&gt;

&lt;p&gt;Until next time&amp;hellip;&lt;/p&gt;
</summary>
   <content type="html">&lt;p&gt;This is  my obligatory hello world post! &lt;/p&gt;

&lt;p&gt;I am starting this blog that will mostly deal with my development experiences and interest. My hopes through out all of this is to increase my online presence in the development community, give back to others as so many before me have done, make new connections, and to never stop learning.&lt;/p&gt;

&lt;p&gt;Until next time&amp;hellip;&lt;/p&gt;
</content>
   <author>
     <name>Ray Clanan</name>
     <uri>http://utopianconcept.com</uri>
   </author>
   <content type="html"><![CDATA[
<p>&lt;p&gt;This is  my obligatory hello world post! &lt;/p&gt;</p>

<p>&lt;p&gt;I am starting this blog that will mostly deal with my development experiences and interest. My hopes through out all of this is to increase my online presence in the development community, give back to others as so many before me have done, make new connections, and to never stop learning.&lt;/p&gt;</p>

<p>&lt;p&gt;Until next time&amp;hellip;&lt;/p&gt;</p>

]]></content>
 </entry>
 

</feed>
