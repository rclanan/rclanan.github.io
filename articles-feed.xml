<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  
  
  

  <title>Utopian Concept LLC &#8211; Articles</title>
  <generator uri="https://github.com/jekyll/jekyll">Jekyll v2.5.3</generator>
  <icon>http://utopianconcept.com/apple-touch-icon-precomposed.png</icon>
  <subtitle>Utopian Concept LLC is a bespoke development company. Experienced with all aspects of development ranging from web, mobile, desktop, and client/server.</subtitle>
  <link href="http://utopianconcept.com/articles-feed.xml" rel="self"/>
  <link href="http://utopianconcept.com/" rel="alternate" type="text/html"/>
  <updated>2015-11-17T03:58:10+00:00</updated>
  <id>http://utopianconcept.com/</id>
  <author>
    <name>Ray Clanan</name>
    <uri>http://utopianconcept.com/</uri>
    <email>rclanan@utopianconcept.com</email>
  </author>

  
  <entry>
    <title>One small step for a man</title>
    <link href="http://utopianconcept.com/articles/one-small-step-for-man/"/>
    <updated>2015-11-16T00:00:00+00:00</updated>
    <id>http://utopianconcept.com/articles/one-small-step-for-man</id>
    <author>
      <name>Ray Clanan</name>
      <uri>http://utopianconcept.com/</uri>
      <email>rclanan@utopianconcept.com</email>
    </author>
    <content type="html">
      &lt;img src=&quot;http://utopianconcept.com/images/small-steps-feature.png&quot; alt=&quot;One small step for a man feature&quot;&gt;&lt;br/&gt;
      &lt;p&gt;In the words of Neil Armstrong, “That’s one small step for (a) man, one giant leap for mankind”&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;. While today might not be a giant leap for mankind, today marks the day that I surpassed my previous commit streak on Github, so it’s a big deal for me! Progress on a &lt;a href=&quot;http://utopianconcept.com/articles/making-a-dent/&quot;&gt;personal commitment&lt;/a&gt; that I made to myself sometime last week. Previously, my longest streak was 10 days, today is the 11th day. I know, not a major accomplishment but have to start small, take baby steps, and celebrate the victories where and when we can!&lt;/p&gt;

&lt;p&gt;According to the book &lt;a href=&quot;http://www.amazon.com/Psycho-Cybernetics-Updated-Expanded-Maxwell-Maltz/dp/0399176136/ref=sr_1_2?ie=UTF8&amp;amp;qid=1447689943&amp;amp;sr=8-2&amp;amp;keywords=Psycho-Cybernetics&quot; title=&quot;Psycho-Cybernetics, Updated and Expanded&quot;&gt;Psycho-Cybernetics&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/Maxwell_Maltz&quot; title=&quot;Maxwell Maltz&quot;&gt;Dr. Maxwell Maltz&lt;/a&gt;, it takes a minimum of about 21 days to form a new habit. A further &lt;a href=&quot;http://onlinelibrary.wiley.com/doi/10.1002/ejsp.674/abstract&quot; title=&quot;How are habits formed: Modelling habit formation in the real world&quot;&gt;study&lt;/a&gt; done at the University College London and published in the &lt;em&gt;European Journal of Social Psychology&lt;/em&gt;, states that on average, it takes 66 days to before a new behavior becomes automatic. Regardless what the magic number is to form this new habit I have committed to, you have to start with day 1 and approach each day as a new battle. View every yesterday as a small victory in its own right.&lt;/p&gt;

&lt;p&gt;On that note though, I also feel that it’s also good to set reasonable achievable short term goals for yourself, longer than a single day. To give yourself something to push for and give those daily ‘battles’ meaning. My first goal was to get past my longest commit of 10 days. Since I have achieved that, and want to make this a habit, I will shoot for hitting the “21 days” as my next goal since its closer than 66. Ten days doesn’t seem like very far away, but when you are taking baby steps, it might seem like forever!&lt;/p&gt;

&lt;p&gt;To those that took the time to read this post, thanks for celebrating my small victory with me!&lt;/p&gt;

&lt;p&gt;As always, until next time…&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;http://www.nasa.gov/mission_pages/apollo/apollo11.html&quot;&gt;http://www.nasa.gov/mission_pages/apollo/apollo11.html&lt;/a&gt; &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;

      &lt;p&gt;&lt;a href=&quot;http://utopianconcept.com/articles/one-small-step-for-man/&quot; rel=&quot;nofollow&quot;&gt;One small step for a man&lt;/a&gt; was originally published by &lt;a href=&quot;http://utopianconcept.com/about/&quot; rel=&quot;nofollow&quot;&gt;Ray Clanan&lt;/a&gt; on &lt;a href=&quot;http://utopianconcept.com&quot; rel=&quot;nofollow&quot;&gt;Utopian Concept LLC&lt;/a&gt;.&lt;/p&gt;
    </content>
  </entry>
  
  <entry>
    <title>Time for a change - onward and upward</title>
    <link href="http://utopianconcept.com/articles/making-a-dent/"/>
    <updated>2015-11-08T00:00:00+00:00</updated>
    <id>http://utopianconcept.com/articles/making-a-dent</id>
    <author>
      <name>Ray Clanan</name>
      <uri>http://utopianconcept.com/</uri>
      <email>rclanan@utopianconcept.com</email>
    </author>
    <content type="html">
      &lt;img src=&quot;http://utopianconcept.com/images/universe-feature.png&quot; alt=&quot;Time for a change - onward and upward feature&quot;&gt;&lt;br/&gt;
      &lt;p&gt;The other day, David Hansson, otherwise known as &lt;a href=&quot;https://signalvnoise.com/writers/dhh&quot;&gt;DHH&lt;/a&gt; in the development community, posted an article called &lt;a href=&quot;https://medium.com/@dhh/reconsider-41adf356857f&quot;&gt;RECONSIDER&lt;/a&gt; from his talk at the &lt;a href=&quot;https://websummit.net/&quot;&gt;Web Submit 2015&lt;/a&gt;. It’s a great read if you are interested in entrepreneurship and startups. It really got me rethinking the direction I was heading with my current company and why I got into all of this in the first place, more on that later. Afterwards, I came across a post on &lt;a href=&quot;https://redd.it/3rw45v&quot;&gt;reddit/r/programming&lt;/a&gt;, LOVE reddit (&lt;a href=&quot;http://www.rememberaaronsw.com/&quot;&gt;R.I.P Aaron&lt;/a&gt;) by the way, which talked about doing 365 days of commits to Github and gives some great tips on how to go about doing so.&lt;/p&gt;

&lt;p&gt;Now, I know most people are probably thinking that these two are in no way related but hang in there. In the RECONSIDER talk, one of the things that stuck in my mind was “Make a dent in the Universe!”, this of course isn’t the first time DHH has talked about that, back in 2008, he made another post about it as well on &lt;a href=&quot;https://signalvnoise.com/posts/1437-put-a-dent-in-the-universe&quot;&gt;signalvnosie.com&lt;/a&gt;. That one little statement, at least to me, is very inspiring, almost like the battle cry from &lt;a href=&quot;http://www.imdb.com/title/tt0112573/&quot;&gt;Brave Heart&lt;/a&gt;, “Alba gu bràth!”, oh wait, no not that one! “but they’ll never take… OUR FREEDOM!”, yes, that one! Sorry for that tangent, back to the topic at hand, dent in the universe. As I was saying, I have for a long time wanted to make my own dent in the universe. Have always yearned to make a name for myself, and to have my own successful company. Getting beyond the multitude of excuses that I put up as my own roadblocks through the years, I have decided that the time is now for all of that to change! It’s time that I start “fighting” for my own FREEDOM! Whatever that might be in the form of. While I contemplate what I want to do as my overall goal/product for my company, so many ideas that I have wrote down, so many niches I have worked in the past that I could lend my expertise to. Just need to figure out which is the viable one from a business model, that or just take a leap and run with one of them. Until I decide which, let me get back to the linkage between the two post!&lt;/p&gt;

&lt;p&gt;In the 365 days of commit post, I love &lt;a href=&quot;https://en.wikipedia.org/wiki/Free_and_open-source_software&quot;&gt;FOSS&lt;/a&gt; (free and open-source software). To me, the whole idea of the 365 days of commits is to, wait for it, make a dent in the FOSS Universe! See what I did there?! It’s also a great learning experience, profile/brand builder, and I think a great place to start investigating ideas as to what direction I want to ultimately go with my company.&lt;/p&gt;

&lt;p&gt;To quote the great &lt;a href=&quot;https://www.cslewis.com/us&quot;&gt;C.S. Lewis&lt;/a&gt;, &lt;a href=&quot;https://www.goodreads.com/quotes/18974-onward-and-upward-to-narnia-and-the-north&quot;&gt;“Onward and Upward! To Narnia and the North!”&lt;/a&gt;, well maybe just onward and upward! Feel free to comment on what you think of any of this. Also, I am always willing to entertain ideas as well.&lt;/p&gt;

&lt;p&gt;As always, until next time…&lt;/p&gt;


      &lt;p&gt;&lt;a href=&quot;http://utopianconcept.com/articles/making-a-dent/&quot; rel=&quot;nofollow&quot;&gt;Time for a change - onward and upward&lt;/a&gt; was originally published by &lt;a href=&quot;http://utopianconcept.com/about/&quot; rel=&quot;nofollow&quot;&gt;Ray Clanan&lt;/a&gt; on &lt;a href=&quot;http://utopianconcept.com&quot; rel=&quot;nofollow&quot;&gt;Utopian Concept LLC&lt;/a&gt;.&lt;/p&gt;
    </content>
  </entry>
  
  <entry>
    <title>REST API testing with frisby.js</title>
    <link href="http://utopianconcept.com/articles/frisbyjs/"/>
    <updated>2015-11-06T00:00:00+00:00</updated>
    <id>http://utopianconcept.com/articles/frisbyjs</id>
    <author>
      <name>Ray Clanan</name>
      <uri>http://utopianconcept.com/</uri>
      <email>rclanan@utopianconcept.com</email>
    </author>
    <content type="html">
      &lt;img src=&quot;http://utopianconcept.com/images/frisbyjs-feature.png&quot; alt=&quot;REST API testing with frisby.js feature&quot;&gt;&lt;br/&gt;
      &lt;p&gt;&lt;em&gt;NOTE: This article assumes that node and npm are already setup and use are using this on an existing project. The demo project can be found on github.com at: &lt;a href=&quot;https://github.com/rclanan/frisby-demo&quot;&gt;https://github.com/rclanan/frisby-demo&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;A colleague of mine, &lt;a href=&quot;http://www.jamiekurtz.com/&quot;&gt;Jamie Kurtz&lt;/a&gt;, recently introduced me to a cool little tool called frisby.js. To quote &lt;a href=&quot;http://frisbyjs.com&quot;&gt;frisby.js&lt;/a&gt;, Frisby is a REST API testing framework built on node.js and Jasmine that makes testing API endpoints easy, fast, and fun.&lt;/p&gt;

&lt;p&gt;After using it for a little over a week to do some basic testing of a new REST web API that we were working on, I would have to agree that it is very easy and fast to pick up and use. As such, I just wanted to do a quick write up on it to help demo it to other developers. I created a lightning talk demo to present at one of our team lunches and this post is basically an extension of that talk.&lt;/p&gt;

&lt;p&gt;First steps, to install frisby.js, add it to your node.js project by running: &lt;code&gt;npm install --save-dev frisby&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;We will also need &lt;a href=&quot;https://www.npmjs.com/package/jasmine-node&quot;&gt;jasmine-node&lt;/a&gt;, which is used to run the actual frisby.js test. To install jasmine-node run: &lt;code&gt;npm install -g jasmine-node&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;To make running the test easier, I would also recommend adding a new script to the package.json file. Label the script &lt;code&gt;test&lt;/code&gt; and set the value to &lt;code&gt;jasmine-node .&lt;/code&gt;. The period in this case is the path of where your test files are stored. Since I am using the &lt;a href=&quot;https://github.com/rclanan/frisby-demo&quot;&gt;demo project&lt;/a&gt;, my tests are directly on the root of the project.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;&quot;scripts&quot;: {
    &quot;test&quot;: &quot;jasmine-node .&quot;
},
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I also like to create another script called &lt;code&gt;test:live&lt;/code&gt; and set the value of &lt;code&gt;jasmine-node . --autotest&lt;/code&gt;, which allows for the automatic execution of the specs after changes in the specs. If you want to run after changes outside of the specs, you can add &lt;code&gt;--watch &amp;lt;path&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;&quot;scripts&quot;: {
    &quot;test&quot;: &quot;jasmine-node .&quot;,
    &quot;test:live&quot;: &quot;jasmine-node . --autotest&quot;
},
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With that in place, we now can run our test by either using &lt;code&gt;npm test&lt;/code&gt; or &lt;code&gt;npm run test:live&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now onto the test themselves! Since I am just trying to demo frisby.js and not how to develop a full blown REST API, I am going to use a handy site called &lt;a href=&quot;http://jsonplaceholder.typicode.com/&quot;&gt;JSONPlaceholder&lt;/a&gt;. JSONPlaceHolder, is a fake online REST API for testing and prototyping.&lt;/p&gt;

&lt;p&gt;For the first test, we are going to just test to make sure the status code is what we expect and the header contains the proper content-type we expect to get back on the response. I am going to make a GET request to /posts, which should return back JSON data and a status code of 200.&lt;/p&gt;

&lt;p&gt;To start with, we need to import the frisby library into our test file. In the demo, this file is first-spec.js.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt; var frisby = require(&#39;frisby&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now to create the actual test itself. First, we use the &lt;code&gt;create&lt;/code&gt; method to name the test, then since this is a GET request, we will use the &lt;code&gt;get&lt;/code&gt; method and pass in the URL of where we are issuing the command to. After that, we &lt;code&gt;toss&lt;/code&gt; the frisby, I mean test!&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;frisby.create(&#39;JSONPlaceholder - Posts API test: GET /posts&#39;)
    .get(&#39;http://jsonplaceholder.typicode.com/posts&#39;)
    .toss();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will create our test for us, but doesn’t do much good without a few extra methods, which in this case, are referred to as expectations via the &lt;a href=&quot;http://frisbyjs.com/docs/api/&quot;&gt;frisby.js documentation&lt;/a&gt;. In our first test, I stated that we are going to test the status code and the content header, so we need to add the &lt;code&gt;expectStatus&lt;/code&gt; and &lt;code&gt;expectHeader&lt;/code&gt; or &lt;code&gt;expectHeaderContains&lt;/code&gt;. I am going to use &lt;code&gt;expectHeaderContains&lt;/code&gt; as it’s the less strict version of &lt;code&gt;expectHeader&lt;/code&gt;, but either method should work.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;frisby.create(&#39;JSONPlaceholder - Posts API test: GET /posts&#39;)
    .get(&#39;http://jsonplaceholder.typicode.com/posts&#39;)
    .expectStatus(200)
    .expectHeaderContains(&#39;content-type&#39;, &#39;application/json&#39;)
    .toss();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With the first test complete, if you haven’t already started &lt;code&gt;test:live&lt;/code&gt; then from a command line, issue the following: &lt;code&gt;npm test&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The output should look similar to this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;.

Finished in 0.906 seconds
1 test, 2 assertions, 0 failures, 0 skipped
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Since the next couple of tests all follow the same format, I am going to bundle up a few of the steps and just show/talk about the test itself.&lt;/p&gt;

&lt;p&gt;For the next test, I am going to test the results of the same GET request that we used in the first test. This time though, I am going to add &lt;code&gt;expectJSONTypes&lt;/code&gt; that will test that the results data type match what we expect to get back. The JSON data set contains an array of items with each item having the structure of:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;{
    &quot;userId&quot;: 1,
    &quot;id&quot;: 1,
    &quot;title&quot;: &quot;sunt aut facere repellat provident occaecati excepturi optio reprehenderit&quot;,
    &quot;body&quot;: &quot;quia et suscipit\nsuscipit recusandae consequuntur expedita et cum\nreprehenderit molestiae ut ut quas totam\nnostrum rerum est autem sunt rem eveniet architecto&quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For testing every item in the array with the above structure, our &lt;code&gt;expectJSONTypes&lt;/code&gt; will look like:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;.expectJSONTypes(&#39;*&#39;, {
    userId: Number,
    id: Number,
    title: String,
    body: String
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you notice the asterisk, that denotes that we want to test the elements of the entire array. To test a single item in the array we can use a question mark instead.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;.expectJSONTypes(&#39;?&#39;, {
    userId: Number,
    id: Number,
    title: String,
    body: String
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now that we have tested the status code, the content header, the data types, let’s create a new test that will test the actual JSON data itself. For that, I am going to still use a GET request but change URL to just return the first post with an id of 1. To test the actual JSON data that is returned, we use &lt;code&gt;expectJSON&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;frisby.create(&#39;JSONPlaceholder - Posts API test: GET /posts/1&#39;)
    .get(&#39;http://jsonplaceholder.typicode.com/posts/1&#39;)
    .expectStatus(200)
    .expectHeaderContains(&#39;content-type&#39;, &#39;application/json&#39;)
    .expectJSONTypes({
        userId: Number,
        id: Number,
        title: String,
        body: String
    })
    .expectJSON({
        userId: 1,
        id: 1,
        title: &quot;sunt aut facere repellat provident occaecati excepturi optio reprehenderit&quot;,
        body: &quot;quia et suscipit\nsuscipit recusandae consequuntur expedita et cum\nreprehenderit molestiae ut ut quas totam\nnostrum rerum est autem sunt rem eveniet architecto&quot;
    })
    .toss();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The other way we could have achieved the same result would be to chain the test together. To call additional test or perform additional logic we can utilize the “Helper” &lt;code&gt;afterJSON&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;frisby.create(&#39;JSONPlaceholder - Posts API test: GET /posts&#39;)
    .get(&#39;http://jsonplaceholder.typicode.com/posts&#39;)
    .expectStatus(200)
    .expectHeaderContains(&#39;content-type&#39;, &#39;application/json&#39;)
    .expectJSONTypes(&#39;*&#39;, {
        userId: Number,
        id: Number,
        title: String,
        body: String
    })
    .afterJSON(function(json) {
        var firstPost = json[0];

        frisby.create(&#39;JSONPlaceholder - Posts API test: GET /posts/1&#39;)
            .get(&#39;http://jsonplaceholder.typicode.com/posts/&#39; + firstPost.id)
            .expectStatus(200)
            .expectHeaderContains(&#39;content-type&#39;, &#39;application/json&#39;)
            .expectJSONTypes({
                userId: Number,
                id: Number,
                title: String,
                body: String
            })
            .expectJSON({
                userId: 1,
                id: 1,
                title: &quot;sunt aut facere repellat provident occaecati excepturi optio reprehenderit&quot;,
                body: &quot;quia et suscipit\nsuscipit recusandae consequuntur expedita et cum\nreprehenderit molestiae ut ut quas totam\nnostrum rerum est autem sunt rem eveniet architecto&quot;
            })
            .toss();

    })
    .toss();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Using the above methods should allow you to get started writing some quick test for your REST API. So far, I am really liking the simplicity of frisby.js. If you know of any other cool libraries to help improve unit testing and overall code quality, hit me up as I am always looking for new tools/ideas on how to improve my code quality and overall workflow!&lt;/p&gt;

&lt;h1 id=&quot;extra---debugging-information&quot;&gt;Extra - Debugging Information&lt;/h1&gt;
&lt;p&gt;Just a quick note about another method that I find to be very useful when generating these test is the &lt;code&gt;inspectJSON&lt;/code&gt; method. Before I reread the documentation, I was utilizing the &lt;code&gt;afterJSON&lt;/code&gt; method to &lt;code&gt;console.log&lt;/code&gt; the JSON data that was returned out to the console so I could verify what I was testing. The &lt;code&gt;inspectJSON&lt;/code&gt; method used the node.js pretty print utility method &lt;a href=&quot;https://nodejs.org/api/util.html#util_util_inspect_object_options&quot;&gt;util.inspect&lt;/a&gt; to provide a colored console output. Frisby.js also provides a &lt;code&gt;inspectBody&lt;/code&gt; method that will just dump the raw parsed/marked up output to the screen as well.&lt;/p&gt;

&lt;p&gt;As always, until next time…&lt;/p&gt;

      &lt;p&gt;&lt;a href=&quot;http://utopianconcept.com/articles/frisbyjs/&quot; rel=&quot;nofollow&quot;&gt;REST API testing with frisby.js&lt;/a&gt; was originally published by &lt;a href=&quot;http://utopianconcept.com/about/&quot; rel=&quot;nofollow&quot;&gt;Ray Clanan&lt;/a&gt; on &lt;a href=&quot;http://utopianconcept.com&quot; rel=&quot;nofollow&quot;&gt;Utopian Concept LLC&lt;/a&gt;.&lt;/p&gt;
    </content>
  </entry>
  
  <entry>
    <title>Obligatory Hello World - Redux</title>
    <link href="http://utopianconcept.com/articles/hello-world-redux/"/>
    <updated>2015-03-03T00:00:00+00:00</updated>
    <id>http://utopianconcept.com/articles/hello-world-redux</id>
    <author>
      <name>Ray Clanan</name>
      <uri>http://utopianconcept.com/</uri>
      <email>rclanan@utopianconcept.com</email>
    </author>
    <content type="html">
      &lt;img src=&quot;http://utopianconcept.com/images/hello-world-feature.jpg&quot; alt=&quot;Obligatory Hello World - Redux feature&quot;&gt;&lt;br/&gt;
      &lt;p&gt;After getting this blog up previously, I started out with with really good intentions as do we all. After that I became very wrapped up in my freelancing projects that I apparently somewhat fell off the face of the web. I come back and fast forward a year, my blog has gone stale.&lt;/p&gt;

&lt;p&gt;Well it’s back now! I have upgraded Jekyll, which is the static site blog generator that creates this site and updated the theme a bit.&lt;/p&gt;

&lt;p&gt;I am shifting focus a bit and have taken a step back from being heavy into freelancing and want to focus on creating my overall brand as well as focus on some products and services that I have had on my todo list for a while now. One of those I have made mention to elsewhere on this site in terms of screencast that I will be starting up shortly to accompany my blog post.&lt;/p&gt;

&lt;p&gt;I am still doing freelancing as well, though I have taken a step back and am very selective on the work that I will accept.   I don’t want to overwhelm myself again and not have any time for my own projects or to improve my personal brand.&lt;/p&gt;

&lt;p&gt;If you have any topics that you would like to see me cover in a blog post or a screencast feel free to let me know. If you are interested in obtaining my services on a freelancing project. Feel free to reach out to me, though it will depend on the project details and my availability at the time. More information on my freelancing services as well as ways to contact me can be found via the &lt;a href=&quot;http://utopianconcept.com/freelance/&quot;&gt;hire me&lt;/a&gt; link or the &lt;a href=&quot;http://utopianconcept.com/contact/&quot;&gt;contact link&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As always, until next time…&lt;/p&gt;

      &lt;p&gt;&lt;a href=&quot;http://utopianconcept.com/articles/hello-world-redux/&quot; rel=&quot;nofollow&quot;&gt;Obligatory Hello World - Redux&lt;/a&gt; was originally published by &lt;a href=&quot;http://utopianconcept.com/about/&quot; rel=&quot;nofollow&quot;&gt;Ray Clanan&lt;/a&gt; on &lt;a href=&quot;http://utopianconcept.com&quot; rel=&quot;nofollow&quot;&gt;Utopian Concept LLC&lt;/a&gt;.&lt;/p&gt;
    </content>
  </entry>
  
  <entry>
    <title>A guide to creating a basic REST API - Series Introduction</title>
    <link href="http://utopianconcept.com/articles/a-gudie-to-creating-a-basic-rest-api-series-introduction/"/>
    <updated>2013-08-20T00:00:00+00:00</updated>
    <id>http://utopianconcept.com/articles/a-gudie-to-creating-a-basic-rest-api-series-introduction</id>
    <author>
      <name>Ray Clanan</name>
      <uri>http://utopianconcept.com/</uri>
      <email>rclanan@utopianconcept.com</email>
    </author>
    <content type="html">
      &lt;img src=&quot;http://utopianconcept.com/images/rest-series-intro-feature.jpg&quot; alt=&quot;A guide to creating a basic REST API - Series Introduction feature&quot;&gt;&lt;br/&gt;
      &lt;p&gt;In this new series, I plan on creating a collection of guides that will demonstrate how to create the same basic REST API in different programming languages.&lt;/p&gt;

&lt;p&gt;As some of you who know me may know, I am very passionate about programming. I love learning a new language and comparing it to languages that I have already picked up. I am not entirely sure why I like so many different languages and I cannot, in all seriousness, answer which is my favorite language suffices to say I am enamored with all aspects of programming in general.&lt;/p&gt;

&lt;p&gt;Now with that being said, one of the best ways that I learn to pick up a new language, is to dive in and create something that I created before in a different language, sort of like the premise of creating the hello world application that most books start with, however I feel that approach is too simplistic of an example so I decided to create this series on creating a basic REST API. This will be more so for my own personal reference as are all the blog post that I write but maybe this can also become somewhat of a &lt;a href=&quot;http://en.wikipedia.org/wiki/Rosetta_Stone&quot;&gt;Rosetta Stone&lt;/a&gt; for someone else trying to pick up a new language as well.&lt;/p&gt;

&lt;p&gt;The first guide that I will create will deal with languages that I already have experience with just to get me into the flow of creating the guides. The follow-up guides will be for languages that are new to me. If there are any requests for a particular guide then I will be happy to do those as well. Also, I welcome any comments in which the guides can be improved.&lt;/p&gt;

&lt;nav class=&quot;toc&quot;&gt;
&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#what-is-an-api&quot; id=&quot;markdown-toc-what-is-an-api&quot;&gt;What is an API?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#examples-of-a-web-api&quot; id=&quot;markdown-toc-examples-of-a-web-api&quot;&gt;Examples of a Web API&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#http-methods-and-http-status-codes&quot; id=&quot;markdown-toc-http-methods-and-http-status-codes&quot;&gt;HTTP Methods and HTTP Status Codes&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#what-is-rest&quot; id=&quot;markdown-toc-what-is-rest&quot;&gt;What is REST?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;/nav&gt;

&lt;hr /&gt;

&lt;h4 id=&quot;disclaimer--i-do-not-claim-to-be-an-expert-on-rest-apis-or-for-that-matter-in-all-the-languages-that-i-am-going-to-try-and-cover-as-such-please-do-not-regard-these-as-best-practices-but-rather-a-stepping-stone-on-yours-and-mine-path-of-learning&quot;&gt;**Disclaimer: ** &lt;em&gt;I do not claim to be an expert on REST, APIs, or for that matter in all the languages that I am going to try and cover. As such, please do not regard these as best practices but rather a stepping stone on yours (and mine) path of learning.&lt;/em&gt;&lt;/h4&gt;

&lt;hr /&gt;

&lt;p&gt;With all of that out of the way, let&#39;s say we get on with the guide. In this introduction, I am just going to cover the basics questions.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;What is an API?&lt;/li&gt;
  &lt;li&gt;Examples of a Web API&lt;/li&gt;
  &lt;li&gt;HTTP Methods and HTTP Status Codes&lt;/li&gt;
  &lt;li&gt;What is REST?&lt;/li&gt;
  &lt;li&gt;Examples of REST&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;what-is-an-api&quot;&gt;What is an API?&lt;/h2&gt;

&lt;p&gt;An API or &lt;strong&gt;A&lt;/strong&gt;pplication &lt;strong&gt;P&lt;/strong&gt;rogramming &lt;strong&gt;I&lt;/strong&gt;nterface can be defined as a contract (or &lt;a href=&quot;http://www.merriam-webster.com/dictionary/interface&quot;&gt;interface&lt;/a&gt;) in which other applications utilize to interact with your system. In doing so this provides externally exposed features into your rather closed environment.&lt;/p&gt;

&lt;p&gt;For this simplistic categorization of APIs, we can think of them coming in two flavors, one being software APIs and the other being web APIs. The focus of this series will be REST APIs which is a type of Web APIs.&lt;/p&gt;

&lt;p&gt;Software APIs typically are related to software libraries or frameworks and are generally geared more towards desktop or client/server type applications.&lt;/p&gt;

&lt;p&gt;Web APIs on the other hand deal with HTTP (&lt;strong&gt;H&lt;/strong&gt;yper&lt;strong&gt;t&lt;/strong&gt;ext &lt;strong&gt;T&lt;/strong&gt;ransfer &lt;strong&gt;P&lt;/strong&gt;rotocol) methods and HTTP Status Codes. More on those later, but the methods are the actions which typically control the API and the status codes along with a  response message is the result of what the API passes back.&lt;/p&gt;

&lt;h2 id=&quot;examples-of-a-web-api&quot;&gt;Examples of a Web API&lt;/h2&gt;

&lt;p&gt;Many of the most popular websites have published public APIs these days. Not all of these examples are of REST APIs as well as the ones that do include REST API they also include other types of APIs like SOAP. Some examples of these popular APIs are:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://code.google.com/&quot;&gt;Google API&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;Allows you to integration with maps, email, Google+, and more.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developers.facebook.com/docs/reference/apis/&quot;&gt;Facebook API&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;Provides integrations like the ability to &#39;Like&#39; and share pages from your website.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://dev.twitter.com/&quot;&gt;Twitter API&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;With this integration you can automate sending tweets when different events occur as well as read tweets via the API&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.salesforce.com/us/developer/docs/api/index.htm&quot;&gt;Salesforce.com&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;Allows you to access information about your contacts, send messages, among other things&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.linkedin.com/apis&quot;&gt;LinkedIn API&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;Allows you to perform searches, share content, etc.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://developer.github.com/v3/&quot;&gt;Github API&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;Provides the ability to create and search among Issues, Gists, Git Data, People, as well as a host of other features&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;http-methods-and-http-status-codes&quot;&gt;HTTP Methods and HTTP Status Codes&lt;/h2&gt;

&lt;h5 id=&quot;http-methods&quot;&gt;HTTP Methods&lt;/h5&gt;

&lt;p&gt;HTTP methods are defined in the &lt;a href=&quot;http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html&quot;&gt;RFC 2616&lt;/a&gt; put out by the &lt;a href=&quot;http://www.w3.org/&quot;&gt;World Wide Web Consortium (W3C)&lt;/a&gt;. These HTTP methods are commonly referred to as &lt;em&gt;&quot;verbs&quot;&lt;/em&gt;. Currently there are a total of eight different verbs that are defined by the HTTP/1.1 protocol. Below these verbs are defined as well as their typical usage.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;OPTIONS
    &lt;ul&gt;
      &lt;li&gt;Used to request what options are available for the request/response&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;GET
    &lt;ul&gt;
      &lt;li&gt;Used to retrieve information about a resource&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;HEAD
    &lt;ul&gt;
      &lt;li&gt;Same as GET except only returns the header information&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;POST
    &lt;ul&gt;
      &lt;li&gt;Used for creating a new resource&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;PUT
    &lt;ul&gt;
      &lt;li&gt;Used for updating a resource&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;DELETE
    &lt;ul&gt;
      &lt;li&gt;Used for deleting a resource&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;TRACE
    &lt;ul&gt;
      &lt;li&gt;Used for tracing the request message&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;CONNECT
    &lt;ul&gt;
      &lt;li&gt;Used for proxies&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In a typical REST API we usually only concern ourselves with GET, POST, PUT, DELETE, which form the basis of &lt;a href=&quot;http://en.wikipedia.org/wiki/Create,_read,_update_and_delete&quot;&gt;CRUD&lt;/a&gt; (Create, Read, Update, and Delete). The most commonly used HTTP method that most people unknowingly utilize is the GET verb. Since GET is used as a way to retrieve information about a resource, which is what is used to load web pages into a browser. Have you ever filled out an online form? Then you have most likely used POST, though there are other options as well. Some browsers do not implement all the HTTP methods nor do they need to.&lt;/p&gt;

&lt;h5 id=&quot;http-status-codes&quot;&gt;HTTP Status Codes&lt;/h5&gt;

&lt;p&gt;HTTP Status Codes are also defined in the &lt;a href=&quot;http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10&quot;&gt;RFC 2616&lt;/a&gt; put out by the W3C. There are numerous types of status codes so for further information please refer to &lt;a href=&quot;http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10&quot;&gt;section ten of the RFC&lt;/a&gt;. I will name a few that you are most likely to use the most, though they all have recommended use cases that are associated with them.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Successful Codes - 2xx
    &lt;ul&gt;
      &lt;li&gt;200 - OK&lt;/li&gt;
      &lt;li&gt;Request has succeeded&lt;/li&gt;
      &lt;li&gt;201 - Created&lt;/li&gt;
      &lt;li&gt;New resource has been created&lt;/li&gt;
      &lt;li&gt;204 - No Content&lt;/li&gt;
      &lt;li&gt;Request has been accepted&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Redirect Codes - 3xx
    &lt;ul&gt;
      &lt;li&gt;304 - Not Modified&lt;/li&gt;
      &lt;li&gt;Indicates resource has not been modified since last requested&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Client Error Codes - 4xx
    &lt;ul&gt;
      &lt;li&gt;400 - Bad Request&lt;/li&gt;
      &lt;li&gt;Request could not be understood&lt;/li&gt;
      &lt;li&gt;401 - Unauthorized&lt;/li&gt;
      &lt;li&gt;Missing or invalid authentication information&lt;/li&gt;
      &lt;li&gt;403 - Forbidden&lt;/li&gt;
      &lt;li&gt;User is not authorized to perform the operation or resource is unavailable&lt;/li&gt;
      &lt;li&gt;404 - Not Found&lt;/li&gt;
      &lt;li&gt;Requested resource was not found&lt;/li&gt;
      &lt;li&gt;409 - Conflict&lt;/li&gt;
      &lt;li&gt;A resource conflict&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Server Error Codes - 5xx
    &lt;ul&gt;
      &lt;li&gt;500 - Internal Server Error&lt;/li&gt;
      &lt;li&gt;General catch-all for thrown exceptions&lt;/li&gt;
      &lt;li&gt;503 - Service Unavailable&lt;/li&gt;
      &lt;li&gt;Service cannot be used at the time of the request&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;what-is-rest&quot;&gt;What is REST?&lt;/h2&gt;

&lt;p&gt;REST stands for &lt;strong&gt;Re&lt;/strong&gt;presentational &lt;strong&gt;S&lt;/strong&gt;tate &lt;strong&gt;T&lt;/strong&gt;ransfer. For the best understanding of the REST architecture, I would refer to man who came up with the idea, &lt;a href=&quot;http://www.ics.uci.edu/~fielding/&quot;&gt;Roy Thomas Fielding&lt;/a&gt;. In his &lt;a href=&quot;http://www.ics.uci.edu/~fielding/pubs/dissertation/top.htm&quot;&gt;dissertation&lt;/a&gt;&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;,&lt;em&gt;Architectural Styles and the Design of Network-based Software Architectures&lt;/em&gt;, details on REST can be found in &lt;a href=&quot;http://www.ics.uci.edu/~fielding/pubs/dissertation/rest_arch_style.htm&quot;&gt;chapter 5&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;REST works on the basic principle of resources. A resource can be anything from a person, to a task, to a blog post. While, REST does not have an official standard that must be followed there are best practices and recommendations put forth in the dissertations and the RFC, amongst other places on the internet. I will not attempt to set for any of those in these guides as I am just trying to show the basic functionality of REST APIs in implemented in different languages. Even though there isn’t a set standard there are six defined constraints that attempt to define what exactly makes a RESTful API.&lt;/p&gt;

&lt;p&gt;The six constraints are:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Client-Server
    &lt;ul&gt;
      &lt;li&gt;This one deals with the separation of concern between the client and server. If the interface between the two remains unchanged then the client and/or server can be replaced and developed independently of each other.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Stateless
    &lt;ul&gt;
      &lt;li&gt;By definition, REST means statelessness; therefore the state is handle the request is embedded in the request itself.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Cache
    &lt;ul&gt;
      &lt;li&gt;This one basically states that a resource must be cacheable and define themselves as such to the client.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Uniform Interface
    &lt;ul&gt;
      &lt;li&gt;This one defines the interface between the client and server that allows the two to be decoupled from each other. Uniform Interface can be further described by four interface constraints:&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Identification of Resources
    &lt;ul&gt;
      &lt;li&gt;Resources are identified in requests using URIs&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Manipulation of Resources through Representations
    &lt;ul&gt;
      &lt;li&gt;Providing you have permission to, you should have enough information to modify or delete a resource once given the representation of the resource&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Self-descriptive messages
    &lt;ul&gt;
      &lt;li&gt;States that each request/response describes how to process each message&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Hypermedia as the engine of application state (HATEOAS)
    &lt;ul&gt;
      &lt;li&gt;HATEOAS states that the client should be able to interact with the service entirely through hypermedia.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Layered System
    &lt;ul&gt;
      &lt;li&gt;The system should be composed of hierarchical layers by constraining component behavior such that each component cannot interact with any layer beyond the immediate layer in which they are interacting with. So, the client would not be able to interact directly with the end server if there is a cache server in between them. The client would interact with the cache server which would in turn interact with the server.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Code-On-Demand (Optional)
    &lt;ul&gt;
      &lt;li&gt;Basically, this states that additional functionality can be distributed in the form of scripts through the API.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;examples-of-rest&quot;&gt;Examples of REST&lt;/h3&gt;
&lt;p&gt;The remaining guides will cover the creation of a task list REST web service. Here we will look at a few examples that will utilize the task list example.&lt;/p&gt;

&lt;p&gt;If we wanted to get a list of all task, we would utilize the GET HTTP method:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;GET http://example.com/tasks HTTP/1.1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Say we wanted to create a new task, for that we would utilize the POST HTTP method:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;POST http://example.com/tasks HTTP/1.1

&amp;lt;?xml version=&quot;1.0&quot;?&amp;gt;
&amp;lt;task&amp;gt;
&amp;lt;name&amp;gt;Some Name Here&amp;lt;/name&amp;gt;
&amp;lt;/task&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If there is a specific task that you would like to see, we would use GET like above and provide it with the task_number:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;GET http://example.com/tasks/12345 HTTP/1.1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To update the name of the task that we just retrieve we would use the PUT verb and could do something like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;PUT http://example.com/tasks/12345 HTTP/1.1

&amp;lt;?xml version=&quot;1.0&quot;?&amp;gt;
&amp;lt;task&amp;gt;
&amp;lt;name&amp;gt;New Name Here&amp;lt;/name&amp;gt;
&amp;lt;/task&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And assuming we had permission to do so, we can delete it by, you guessed it, the DELETE method:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;DELETE http://example.com/tasks/12345 HTTP/1.1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For further examples, follow along with the rest of the series and see how we go about implementing a basic REST API for tasks, and then take it a step further and see how do implement the same API across different languages.&lt;/p&gt;

&lt;h3 id=&quot;references&quot;&gt;References:&lt;/h3&gt;
&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;Fielding, Roy Thomas. &lt;em&gt;Architectural Styles and the Design of Network-based Software Architectures&lt;/em&gt;. Doctoral dissertation, University of California, Irvine, 2000. &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;

      &lt;p&gt;&lt;a href=&quot;http://utopianconcept.com/articles/a-gudie-to-creating-a-basic-rest-api-series-introduction/&quot; rel=&quot;nofollow&quot;&gt;A guide to creating a basic REST API - Series Introduction&lt;/a&gt; was originally published by &lt;a href=&quot;http://utopianconcept.com/about/&quot; rel=&quot;nofollow&quot;&gt;Ray Clanan&lt;/a&gt; on &lt;a href=&quot;http://utopianconcept.com&quot; rel=&quot;nofollow&quot;&gt;Utopian Concept LLC&lt;/a&gt;.&lt;/p&gt;
    </content>
  </entry>
  
  <entry>
    <title>Creating a WiX installer for a .NET Web Project</title>
    <link href="http://utopianconcept.com/articles/creating-a-wix-installer-for-a-.net-web-project/"/>
    <updated>2013-08-12T00:00:00+00:00</updated>
    <id>http://utopianconcept.com/articles/creating-a-wix-installer-for-a-.net-web-project</id>
    <author>
      <name>Ray Clanan</name>
      <uri>http://utopianconcept.com/</uri>
      <email>rclanan@utopianconcept.com</email>
    </author>
    <content type="html">
      &lt;img src=&quot;http://utopianconcept.com/images/wix-feature.png&quot; alt=&quot;Creating a WiX installer for a .NET Web Project feature&quot;&gt;&lt;br/&gt;
      &lt;p&gt;The other day I was wrapping up some changes to a production web service at a clients, got ready to fill out the deployment instructions when I noticed that there was no installer package or previous deployment plan in place and this was a service that had been in production for quite some time now. The client has since started using WiX for all of their deployment packages.&lt;/p&gt;

&lt;p&gt;With that being said, I figured I would share the steps I used to create the WiX installer for this web service I was getting ready to deploy.&lt;/p&gt;

&lt;p&gt;First create a new WiX project in the solution where the web project is.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://farm8.staticflickr.com/7326/9472180915_ef89a463d3.jpg&quot; alt=&quot;Add New Project&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I like to contain all my “settings” in an include file for easier maintenance. To do so the next step I do is to create an include file called Configuration.wxi.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://farm3.staticflickr.com/2853/9474968680_48cb47c7d1.jpg&quot; alt=&quot;Add New Item&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Some of the basic elements I define in the configuration include file are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Product Name - Name of the product you are installing&lt;/li&gt;
  &lt;li&gt;Product Title - Title of the product you are installing&lt;/li&gt;
  &lt;li&gt;Manufacturer - Your company name&lt;/li&gt;
  &lt;li&gt;App URL - URL to point to more information about the application or the application itself&lt;/li&gt;
  &lt;li&gt;Description - Brief overview of what the application is for&lt;/li&gt;
  &lt;li&gt;Comments - Additional note about the application&lt;/li&gt;
  &lt;li&gt;Install Version - Version of the product. This can be auto incremented with the use of certain build scripts but for this client they controlled this setting manually.&lt;/li&gt;
  &lt;li&gt;Upgrade Code - Product GUID used for tracking upgrades&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So you will end up with something that looks along the lines of this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-xml&quot;&gt;&amp;lt;?xml version=&quot; 1.0&quot; encoding=&quot; utf-8&quot;?&amp;gt;
&amp;lt;Include&amp;gt;
  &amp;lt;? define ProductName=&quot;Business Web Service&quot; ?&amp;gt;
  &amp;lt;? define ProductTitle=&quot;Business Web Service&quot; ?&amp;gt;
  &amp;lt;? define Manufacturer=&quot;Business Name, Inc.&quot; ?&amp;gt;
  &amp;lt;? define AppURL=&quot;http://www.businessname.com&quot; ?&amp;gt;
  &amp;lt;? define Description=&quot;Installer for Business Web Service&quot; ?&amp;gt;
  &amp;lt;? define Comments=&quot;Business Web Service Installer&quot; ?&amp;gt;
  &amp;lt;? define InstallVersion=&quot;1.0.0.0 ?&amp;gt;
  &amp;lt;? define UpgradeCode=&quot;YOUR-GUID-HERE&quot; ?&amp;gt;
&amp;lt;/Include&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next thing we need to do is update our references. We will want to add two references.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The project
    &lt;ul&gt;
      &lt;li&gt;Change Harvest to False&lt;/li&gt;
      &lt;li&gt;Change Project Output Groups to None&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;WiXUIExtension&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now we need to edit the WiX installer project file. At the top of the project file we need to enable project harvesting. To the top of the file in the PropertyGroup element add:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?xml version=&quot; 1.0&quot; encoding=&quot; utf-8&quot;?&amp;gt;
&amp;lt;Project ToolsVersion=&quot; 4.0&quot; DefaultTargets=&quot; Build&quot; xmlns=&quot; http://schemas.microsoft.com/developer/msbuild/2003 &quot;&amp;gt;
&amp;lt;PropertyGroup&amp;gt;
&amp;lt; EnableProjectHarvesting&amp;gt;True &amp;lt;/EnableProjectHarvesting&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Under the ItemGroup that references your projects solution we need to add a tag to let WiX know that this is a web project. This will be used for conditional statements later on:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-xml&quot;&gt;&amp;lt;ItemGroup&amp;gt;
&amp;lt; ProjectReference Include =&quot;..\BusinessWebService\BusinessWebService.csproj &quot;&amp;gt;
&amp;lt; Name&amp;gt;BusinessWebService &amp;lt;/Name&amp;gt;
&amp;lt; Project&amp;gt;{PROJECT-GUID-HERE} &amp;lt;/Project&amp;gt;
&amp;lt; Private&amp;gt;True &amp;lt;/Private&amp;gt;
&amp;lt; DoNotHarvest&amp;gt;True &amp;lt;/DoNotHarvest&amp;gt;
&amp;lt; RefProjectOutputGroups&amp;gt;
&amp;lt;/ RefProjectOutputGroups&amp;gt;
&amp;lt; RefTargetDir&amp;gt;INSTALLFOLDER &amp;lt;/RefTargetDir&amp;gt;
&amp;lt; WebProject&amp;gt;True &amp;lt;/WebProject&amp;gt;
&amp;lt;/ ProjectReference&amp;gt;
&amp;lt;/ItemGroup&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next we need to add a custom target that will get trigger before the build. To do so at the end of the file add:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-xml&quot;&gt;&amp;lt;Target Name=&quot; BeforeBuild&quot;&amp;gt;
&amp;lt;/Target&amp;gt;
&amp;lt;/Project&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We need to define four elements in this target. For more detailed information on these elements visit the wix documentation.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;MSBuild - Sets up the conditional to look for the WebProject condition that we setup previously&lt;/li&gt;
  &lt;li&gt;PropertyGroup - Used to define a constant that points to the PackageDir&lt;/li&gt;
  &lt;li&gt;ItemGroup - Used to specify the input paths for the linker&lt;/li&gt;
  &lt;li&gt;HeatDirectory - Controls the collection of files needed to be included in this web project. Heat is a time saver as otherwise you would have to specify all of your files manually.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For my project, I ended up with something that looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-xml&quot;&gt;&amp;lt;Target Name=&quot; BeforeBuild&quot;&amp;gt;
&amp;lt; MSBuild Projects =&quot;%(ProjectReference.FullPath) &quot;
Targets=&quot; Package&quot;
Properties=&quot; Configuration=$(Configuration);Platform=AnyCPU &quot;
Condition=&quot; &#39;%(ProjectReference.WebProject)&#39;==&#39;True&#39;&quot; /&amp;gt;
&amp;lt; PropertyGroup&amp;gt;
&amp;lt; DefineConstants Condition =&quot;&#39;%(ProjectReference.WebProject)&#39;==&#39;True&#39; &quot;&amp;gt;
%(ProjectReference.Name).PackageDir=%(ProjectReference.RootDir)%(ProjectReference.Directory)obj\$(Configuration)\Package\PackageTmp\
&amp;lt;/ DefineConstants&amp;gt;
&amp;lt;/ PropertyGroup&amp;gt;
&amp;lt; ItemGroup&amp;gt;
&amp;lt; LinkerBindInputPaths Include=&quot; %(ProjectReference.RootDir)%(ProjectReference.Directory)obj\$(Configuration)\Package\PackageTmp\ &quot; /&amp;gt;
&amp;lt;/ ItemGroup&amp;gt;
&amp;lt; HeatDirectory OutputFile =&quot;%(ProjectReference.Filename).wxs &quot;
Directory=&quot; %(ProjectReference.RootDir)%(ProjectReference.Directory)obj\$(Configuration)\Package\PackageTmp\ &quot;
DirectoryRefId=&quot; INSTALLLOCATION&quot;
ComponentGroupName=&quot; %(ProjectReference.Filename)_Project&quot;
AutoGenerateGuids=&quot; false&quot;
GenerateGuidsNow=&quot; true&quot;
SuppressCom=&quot; true&quot;
SuppressFragments=&quot; true&quot;
SuppressRegistry=&quot; true&quot;
SuppressRootDirectory=&quot; true&quot;
ToolPath=&quot; $(WiXToolPath)&quot;
Condition=&quot; &#39;%(ProjectReference.WebProject)&#39;==&#39;True&#39;&quot;
Transforms=&quot; %(ProjectReference.Filename).xsl&quot;
PreprocessorVariable=&quot; var.%(ProjectReference.Name).PackageDir&quot; /&amp;gt;
&amp;lt;/Target&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Normally, you would want it to auto generate the GUIDs for you but that option can not be used if you’re installing to a non-standard directory location. Once the rest of the pieces are in place, we will get a new file in our projects directory that you will need to manually include to your projects source tree once we build it for the first time.&lt;/p&gt;

&lt;p&gt;Next I need to add an XSL file to our project that will control the omitting of certain files that I don’t want to include in the file installer. For this project, since the client doesn’t want to push out xml or config files. I will omit them from the installer using an Xsl Stylesheet defined in the Transforms property earlier in the Target element of the project file.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://farm3.staticflickr.com/2840/9472180923_756dc0b1a7.jpg&quot; alt=&quot;Add New Item&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This file will look like:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-xml&quot;&gt;&amp;lt;?xml version=&quot; 1.0&quot; encoding=&quot; utf-8&quot;?&amp;gt;

&amp;lt;xsl:stylesheet version=&quot; 1.0&quot; xmlns:xsl=&quot; http://www.w3.org/1999/XSL/Transform&quot;
xmlns:wix=&quot; http://schemas.microsoft.com/wix/2006/wi&quot;
xmlns:msxsl=&quot; urn:schemas-microsoft-com:xslt&quot; exclude-result-prefixes=&quot; msxsl&quot;&amp;gt;

&amp;lt;xsl:output method=&quot; xml&quot; indent=&quot; yes&quot; /&amp;gt;

&amp;lt;!--Identity Transform--&amp;gt;
&amp;lt;xsl:template match=&quot; @*|node()&quot;&amp;gt;
&amp;lt; xsl:copy&amp;gt;
&amp;lt; xsl:apply-templates select =&quot;@*|node() &quot; /&amp;gt;
&amp;lt;/ xsl:copy&amp;gt;
&amp;lt;/xsl:template&amp;gt;

&amp;lt;!--Set up keys for ignoring various file types--&amp;gt;
&amp;lt;xsl:key name=&quot; config-search&quot;
match=&quot; wix:Component[contains(wix:File/@Source, &#39;.config&#39;) and not(contains(wix:File/@Source, &#39;.production&#39;))]&quot;
use=&quot; @Id&quot; /&amp;gt;
&amp;lt;xsl:key name=&quot; wixlib-search&quot; match=&quot; wix:Component[contains(wix:File/@Source, &#39;.wixlib&#39;)]&quot; use =&quot;@Id &quot; /&amp;gt;
&amp;lt;xsl:key name=&quot; svn-search&quot; match=&quot; wix:Component[ancestor::wix:Directory/@Name = &#39;.svn&#39;]&quot; use =&quot;@Id &quot; /&amp;gt;
&amp;lt;xsl:key name=&quot; xml-search&quot; match=&quot; wix:Component[contains(wix:File/@Source, &#39;.xml&#39;)]&quot; use =&quot;@Id &quot; /&amp;gt;

&amp;lt;!--Match and ignore .config files--&amp;gt;
&amp;lt;xsl:template match=&quot; wix:Component[key(&#39;config-search&#39;, @Id)]&quot; /&amp;gt;
&amp;lt;xsl:template match=&quot; wix:ComponentRef[key(&#39;config-search&#39;, @Id)] &quot; /&amp;gt;

&amp;lt;!--Match and ignore leftover .wixlib files on developer machines --&amp;gt;
&amp;lt;xsl:template match=&quot; wix:Component[key(&#39;wixlib-search&#39;, @Id)]&quot; /&amp;gt;
&amp;lt;xsl:template match=&quot; wix:ComponentRef[key(&#39;wixlib-search&#39;, @Id)] &quot; /&amp;gt;

&amp;lt;!--Match and ignore “.svn&quot; directories on build machines --&amp;gt;
&amp;lt;xsl:template match=&quot; wix:Directory[@Name = &#39;.svn&#39;]&quot; /&amp;gt;
&amp;lt;xsl:template match=&quot; wix:ComponentRef[key(&#39;svn-search&#39;, @Id)]&quot; /&amp;gt;

&amp;lt;!--Match and ignore leftover .xml files on developer machines --&amp;gt;
&amp;lt;xsl:template match=&quot; wix:Component[key(&#39;xml-search&#39;, @Id)]&quot; /&amp;gt;
&amp;lt;xsl:template match=&quot; wix:ComponentRef[key(&#39;xml-search&#39;, @Id)]&quot; /&amp;gt;

&amp;lt;/xsl:stylesheet&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we can move to our final file which should be named Product.wxs. This file is the key to controlling all aspects of the installer. The first thing we need to include is our include file. We will do so using the &lt;?include ?&gt; directive.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-xml&quot;&gt;&amp;lt;?xml version=&quot; 1.0&quot; encoding=&quot; UTF-8&quot;?&amp;gt;
&amp;lt;WiX xmlns=&quot; http://schemas.microsoft.com/wix/2006/wi&quot;&amp;gt;
&amp;lt;?include Configuration.wxi ?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With our configuration file included, we will now have access to all of the variables that we defined earlier in the form of $(var.VariableName). Let’s configure the Product element next.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-xml&quot;&gt;&amp;lt;Product Id=&quot; *&quot;
Name=&quot; $(var.ProductName)&quot;
Language=&quot; 1033&quot;
Version=&quot; $(var.InstallVersion)&quot;
Manufacturer=&quot; $(var.Manufacturer)&quot;
UpgradeCode=&quot; $(var.UpgradeCode)&quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next we will move onto the Package element:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-xml&quot;&gt;&amp;lt;Package Id=&quot; *&quot;
Description=&quot; $(var.Description)&quot;
Comments=&quot; $(var.Comments)&quot;
Manufacturer=&quot; $(var.Manufacturer)&quot;
InstallerVersion=&quot; 200&quot;
Languages=&quot; 1033&quot;
Compressed=&quot; yes&quot;
SummaryCodepage=&quot; 1252&quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;From there we can go on to configure our Feature element:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-xml&quot;&gt;&amp;lt;Feature Id=&quot; ProductFeature&quot; Title=&quot; $(var.ProductTitle)&quot; Level=&quot; 1&quot;&amp;gt;
  &amp;lt; ComponentGroupRef Id =&quot;BusinessWebService_Project &quot; /&amp;gt;
  &amp;lt; ComponentGroupRef Id =&quot;Product.Generated &quot; /&amp;gt;
&amp;lt;/ Feature&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The default Product file comes with a Fragment whose Id is called ProductComponents. We can remove that since we will be using Heat to create that fragment. Otherwise we would have to specify each of our files in that fragment manually.&lt;/p&gt;

&lt;p&gt;Now we need to configure the InstallLocation to point to where we want to program to be installed initially.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-xml&quot;&gt;&amp;lt; Directory Id =&quot; TARGETDIR &quot; Name =&quot; SourceDir &quot;&amp;gt;
  &amp;lt; Directory Id = &quot;PROGRAMFILES &quot; Name = &quot;Program Files &quot; &amp;gt;
    &amp;lt; Directory Id = &quot;INSTALLLOCATION &quot; Name = &quot;BusinessWebService &quot; /&amp;gt;
  &amp;lt;/ Directory &amp;gt;
&amp;lt;/ Directory &amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We also need to declare a property that will tell WiX where the installlocation is:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-xml&quot;&gt;&amp;lt;Property Id=&quot; WIXUI_INSTALLDIR&quot; Value=&quot; INSTALLLOCATION&quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After that you should be ready to build your installer. Upon a successful build you will need to include the file that was generated in the project’s folder. You will end up with a structure like:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://farm4.staticflickr.com/3825/9474968650_c528df53ff_s.jpg&quot; alt=&quot;Add New Item&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Until next time…&lt;/p&gt;

&lt;h3 id=&quot;references&quot;&gt;References:&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;C Surfleet. (2011, June 30). Simplify Deployment with Visual Studio and WiX [Web log post]. Retrieved from &lt;a href=&quot;http://www.chrissurfleet.co.uk/post/simplify-deployment-with-visual-studio-and-wix.aspx&quot;&gt;http://www.chrissurfleet.co.uk/post/simplify-deployment-with-visual-studio-and-wix.aspx&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


      &lt;p&gt;&lt;a href=&quot;http://utopianconcept.com/articles/creating-a-wix-installer-for-a-.net-web-project/&quot; rel=&quot;nofollow&quot;&gt;Creating a WiX installer for a .NET Web Project&lt;/a&gt; was originally published by &lt;a href=&quot;http://utopianconcept.com/about/&quot; rel=&quot;nofollow&quot;&gt;Ray Clanan&lt;/a&gt; on &lt;a href=&quot;http://utopianconcept.com&quot; rel=&quot;nofollow&quot;&gt;Utopian Concept LLC&lt;/a&gt;.&lt;/p&gt;
    </content>
  </entry>
  
  <entry>
    <title>Creating a Mock Web Service in .NET</title>
    <link href="http://utopianconcept.com/articles/creating-a-mock-web-service-in-.net/"/>
    <updated>2013-08-08T00:00:00+00:00</updated>
    <id>http://utopianconcept.com/articles/creating-a-mock-web-service-in-.net</id>
    <author>
      <name>Ray Clanan</name>
      <uri>http://utopianconcept.com/</uri>
      <email>rclanan@utopianconcept.com</email>
    </author>
    <content type="html">
      &lt;img src=&quot;http://utopianconcept.com/images/mock-web-feature.jpg&quot; alt=&quot;Creating a Mock Web Service in .NET feature&quot;&gt;&lt;br/&gt;
      &lt;p&gt;Earlier this week at a client’s I had to trace down where an exception was coming from when making a web service call. I had access to the client’s front end code, the part that actually made the calls to the web service in question but didn’t have access to the code for the web service. In order to replicate this, I figured the best route would be to create a mock web service that I could then throw exceptions or custom return values that I would like to test.&lt;/p&gt;

&lt;p&gt;Creating a mock web service has numerous benefits in terms of testing. Some of those might include:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;By passing a web service that charges you for every service call.&lt;/li&gt;
  &lt;li&gt;Serve up different scenarios for “expected” results.&lt;/li&gt;
  &lt;li&gt;Simulate the web service being down or not available.&lt;/li&gt;
  &lt;li&gt;The service is still being developed and you need to continue on with your development.&lt;/li&gt;
  &lt;li&gt;Test exceptions that might be thrown from the web service.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With the later bullet point being my case, I start off by grabbing the &lt;a href=&quot;http://en.wikipedia.org/wiki/Web_Services_Description_Language&quot;&gt;WSDL&lt;/a&gt; file from the existing running web service. To do this you can just append ?wsdl to the path and it will generate the WSDL XML for you. Save this out to your local machine.&lt;/p&gt;

&lt;p&gt;After acquiring the WSDL XML, we will use the &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/7h3ystb6.aspx&quot;&gt;wsdl.exe&lt;/a&gt; file provided by Visual Studio to create our service interface. Open up the &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/ms229859.aspx&quot;&gt;Visual Studio Command Prompt&lt;/a&gt;, and type:
~~~
wsdl /language:CS /namespace:Your.Namespace /out:Output\Directory /protocol:SOAP /serverinterface yourwsdlxmlfile.wsdl
~~~
This should create a .cs file in the /out directory that will contain the interface that you need to implement to create a mock web service.&lt;/p&gt;

&lt;p&gt;In Visual Studio, create a new ASP.NET Empty Web Application from the Web installed templates under Add New Project. Add the .cs file to that was generated to this project, and then add a new web service.&lt;/p&gt;

&lt;p&gt;In the code behind of this web service, change the class to implement the interface name of the .cs file that you just added to the project. Once that is done, tell Visual Studio to implement the interface which will give you stubs for the web service methods. Add the [WebMethod] attribute to each of the method calls to make them accessible via the web service. From here you can either leave the default throw in place or add your own custom code that you want your mock service to implement.&lt;/p&gt;

&lt;p&gt;If you run the application you should be able to navigate to your mock web service. If that is successful, then you can go to your existing client code and add a web service to the generated URL that points to the newly created mock web service.&lt;/p&gt;

&lt;p&gt;Have fun testing your web service! Just don’t forget to point the web reference back to the original web service instead of your mock service before deploying.&lt;/p&gt;

&lt;p&gt;Until next time…&lt;/p&gt;

      &lt;p&gt;&lt;a href=&quot;http://utopianconcept.com/articles/creating-a-mock-web-service-in-.net/&quot; rel=&quot;nofollow&quot;&gt;Creating a Mock Web Service in .NET&lt;/a&gt; was originally published by &lt;a href=&quot;http://utopianconcept.com/about/&quot; rel=&quot;nofollow&quot;&gt;Ray Clanan&lt;/a&gt; on &lt;a href=&quot;http://utopianconcept.com&quot; rel=&quot;nofollow&quot;&gt;Utopian Concept LLC&lt;/a&gt;.&lt;/p&gt;
    </content>
  </entry>
  
  <entry>
    <title>Obligatory Hello World</title>
    <link href="http://utopianconcept.com/articles/hello-world/"/>
    <updated>2013-08-07T00:00:00+00:00</updated>
    <id>http://utopianconcept.com/articles/hello-world</id>
    <author>
      <name>Ray Clanan</name>
      <uri>http://utopianconcept.com/</uri>
      <email>rclanan@utopianconcept.com</email>
    </author>
    <content type="html">
      &lt;img src=&quot;http://utopianconcept.com/images/hello-world-feature.jpg&quot; alt=&quot;Obligatory Hello World feature&quot;&gt;&lt;br/&gt;
      &lt;p&gt;This is  my obligatory hello world post!&lt;/p&gt;

&lt;p&gt;I am starting this blog that will mostly deal with my development experiences and interest. My hopes through out all of this is to increase my online presence in the development community, give back to others as so many before me have done, make new connections, and to never stop learning.&lt;/p&gt;

&lt;p&gt;Until next time…&lt;/p&gt;

      &lt;p&gt;&lt;a href=&quot;http://utopianconcept.com/articles/hello-world/&quot; rel=&quot;nofollow&quot;&gt;Obligatory Hello World&lt;/a&gt; was originally published by &lt;a href=&quot;http://utopianconcept.com/about/&quot; rel=&quot;nofollow&quot;&gt;Ray Clanan&lt;/a&gt; on &lt;a href=&quot;http://utopianconcept.com&quot; rel=&quot;nofollow&quot;&gt;Utopian Concept LLC&lt;/a&gt;.&lt;/p&gt;
    </content>
  </entry>
  

</feed>
